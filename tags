!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ARCHITECTURE_ID	build/CMakeFiles/3.6.1/CompilerIdC/CMakeCCompilerId.c	/^#   define ARCHITECTURE_ID /;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.6.1/CompilerIdC/CMakeCCompilerId.c	/^#  define ARCHITECTURE_ID /;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.6.1/CompilerIdC/CMakeCCompilerId.c	/^#  define ARCHITECTURE_ID$/;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.6.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#   define ARCHITECTURE_ID /;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.6.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define ARCHITECTURE_ID /;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.6.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define ARCHITECTURE_ID$/;"	d	file:
ARRAYSIZE	utf8.c	/^#define ARRAYSIZE(/;"	d	file:
AssocDataValue	jim.c	/^typedef struct AssocDataValue$/;"	s	file:
AssocDataValue	jim.c	/^} AssocDataValue;$/;"	t	typeref:struct:AssocDataValue	file:
BackslashQuoteString	jim.c	/^static int BackslashQuoteString(const char *s, int len, char *q)$/;"	f	file:
CMAKE_BINARY_DIR	build/Makefile	/^CMAKE_BINARY_DIR = \/Users\/n.zavaritsky\/jimtcl.git\/stripped\/build$/;"	m
CMAKE_COMMAND	build/Makefile	/^CMAKE_COMMAND = \/usr\/local\/Cellar\/cmake\/3.6.1\/bin\/cmake$/;"	m
CMAKE_SOURCE_DIR	build/Makefile	/^CMAKE_SOURCE_DIR = \/Users\/n.zavaritsky\/jimtcl.git\/stripped$/;"	m
COMPILER_ID	build/CMakeFiles/3.6.1/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_ID /;"	d	file:
COMPILER_ID	build/CMakeFiles/3.6.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_ID /;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.6.1/CompilerIdC/CMakeCCompilerId.c	/^  # define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.6.1/CompilerIdC/CMakeCCompilerId.c	/^#  define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.6.1/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.6.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^  # define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.6.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.6.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.6.1/CompilerIdC/CMakeCCompilerId.c	/^  # define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.6.1/CompilerIdC/CMakeCCompilerId.c	/^#  define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.6.1/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.6.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^  # define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.6.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.6.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.6.1/CompilerIdC/CMakeCCompilerId.c	/^  # define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.6.1/CompilerIdC/CMakeCCompilerId.c	/^#   define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.6.1/CompilerIdC/CMakeCCompilerId.c	/^#  define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.6.1/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.6.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^  # define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.6.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#   define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.6.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.6.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/3.6.1/CompilerIdC/CMakeCCompilerId.c	/^#  define COMPILER_VERSION_TWEAK /;"	d	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/3.6.1/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_VERSION_TWEAK /;"	d	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/3.6.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_TWEAK /;"	d	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/3.6.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_TWEAK /;"	d	file:
C_DIALECT	build/CMakeFiles/3.6.1/CompilerIdC/CMakeCCompilerId.c	/^#  define C_DIALECT /;"	d	file:
C_DIALECT	build/CMakeFiles/3.6.1/CompilerIdC/CMakeCCompilerId.c	/^#  define C_DIALECT$/;"	d	file:
C_DIALECT	build/CMakeFiles/3.6.1/CompilerIdC/CMakeCCompilerId.c	/^# define C_DIALECT /;"	d	file:
DEC	build/CMakeFiles/3.6.1/CompilerIdC/CMakeCCompilerId.c	/^#define DEC(/;"	d	file:
DEC	build/CMakeFiles/3.6.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#define DEC(/;"	d	file:
DIR	jim-win32compat.h	/^typedef struct DIR {$/;"	s
DIR	jim-win32compat.h	/^} DIR;$/;"	t	typeref:struct:DIR
DictAddElement	jim.c	/^static int DictAddElement(Jim_Interp *interp, Jim_Obj *objPtr,$/;"	f	file:
DupCommandInternalRep	jim.c	/^static void DupCommandInternalRep(Jim_Interp *interp, Jim_Obj *srcPtr, Jim_Obj *dupPtr)$/;"	f	file:
DupDictInternalRep	jim.c	/^void DupDictInternalRep(Jim_Interp *interp, Jim_Obj *srcPtr, Jim_Obj *dupPtr)$/;"	f
DupDictSubstInternalRep	jim.c	/^void DupDictSubstInternalRep(Jim_Interp *interp, Jim_Obj *srcPtr, Jim_Obj *dupPtr)$/;"	f
DupExprInternalRep	jim.c	/^static void DupExprInternalRep(Jim_Interp *interp, Jim_Obj *srcPtr, Jim_Obj *dupPtr)$/;"	f	file:
DupListInternalRep	jim.c	/^void DupListInternalRep(Jim_Interp *interp, Jim_Obj *srcPtr, Jim_Obj *dupPtr)$/;"	f
DupScanFmtInternalRep	jim.c	/^void DupScanFmtInternalRep(Jim_Interp *interp, Jim_Obj *srcPtr, Jim_Obj *dupPtr)$/;"	f
DupScriptInternalRep	jim.c	/^void DupScriptInternalRep(Jim_Interp *interp, Jim_Obj *srcPtr, Jim_Obj *dupPtr)$/;"	f
DupSourceInternalRep	jim.c	/^void DupSourceInternalRep(Jim_Interp *interp, Jim_Obj *srcPtr, Jim_Obj *dupPtr)$/;"	f
DupStringInternalRep	jim.c	/^static void DupStringInternalRep(Jim_Interp *interp, Jim_Obj *srcPtr, Jim_Obj *dupPtr)$/;"	f	file:
EQUALS	build/Makefile	/^EQUALS = =$/;"	m
ExprAddLazyOperator	jim.c	/^static int ExprAddLazyOperator(Jim_Interp *interp, ExprByteCode * expr, ParseToken *t)$/;"	f	file:
ExprAddOperator	jim.c	/^static int ExprAddOperator(Jim_Interp *interp, ExprByteCode * expr, ParseToken *t)$/;"	f	file:
ExprBool	jim.c	/^static int ExprBool(Jim_Interp *interp, Jim_Obj *obj)$/;"	f	file:
ExprByteCode	jim.c	/^typedef struct ExprByteCode$/;"	s	file:
ExprByteCode	jim.c	/^} ExprByteCode;$/;"	t	typeref:struct:ExprByteCode	file:
ExprCheckCorrectness	jim.c	/^static int ExprCheckCorrectness(Jim_Interp *interp, Jim_Obj *exprObjPtr, ExprByteCode * expr)$/;"	f	file:
ExprCreateByteCode	jim.c	/^static ExprByteCode *ExprCreateByteCode(Jim_Interp *interp, const ParseTokenList *tokenlist, Jim_Obj *exprObjPtr, Jim_Obj *fileNameObj)$/;"	f	file:
ExprFreeByteCode	jim.c	/^static void ExprFreeByteCode(Jim_Interp *interp, ExprByteCode * expr)$/;"	f	file:
ExprPop	jim.c	/^static Jim_Obj *ExprPop(struct JimExprState *e)$/;"	f	file:
ExprPush	jim.c	/^static void ExprPush(struct JimExprState *e, Jim_Obj *obj)$/;"	f	file:
ExprTernaryGetColonLeftIndex	jim.c	/^static int ExprTernaryGetColonLeftIndex(ExprByteCode *expr, int right_index)$/;"	f	file:
ExprTernaryGetMoveIndices	jim.c	/^static int ExprTernaryGetMoveIndices(ExprByteCode *expr, int right_index, int *prev_right_index, int *prev_left_index)$/;"	f	file:
ExprTernaryReorderExpression	jim.c	/^static void ExprTernaryReorderExpression(Jim_Interp *interp, ExprByteCode *expr)$/;"	f	file:
FormatGetCnvCount	jim.c	/^#define FormatGetCnvCount(/;"	d	file:
FormatGetError	jim.c	/^#define FormatGetError(/;"	d	file:
FormatGetMaxPos	jim.c	/^#define FormatGetMaxPos(/;"	d	file:
FreeCommandInternalRep	jim.c	/^static void FreeCommandInternalRep(Jim_Interp *interp, Jim_Obj *objPtr)$/;"	f	file:
FreeDictInternalRep	jim.c	/^void FreeDictInternalRep(Jim_Interp *interp, Jim_Obj *objPtr)$/;"	f
FreeDictSubstInternalRep	jim.c	/^void FreeDictSubstInternalRep(Jim_Interp *interp, Jim_Obj *objPtr)$/;"	f
FreeExprInternalRep	jim.c	/^static void FreeExprInternalRep(Jim_Interp *interp, Jim_Obj *objPtr)$/;"	f	file:
FreeInterpolatedInternalRep	jim.c	/^static void FreeInterpolatedInternalRep(Jim_Interp *interp, Jim_Obj *objPtr)$/;"	f	file:
FreeListInternalRep	jim.c	/^void FreeListInternalRep(Jim_Interp *interp, Jim_Obj *objPtr)$/;"	f
FreeScanFmtInternalRep	jim.c	/^void FreeScanFmtInternalRep(Jim_Interp *interp, Jim_Obj *objPtr)$/;"	f
FreeScriptInternalRep	jim.c	/^void FreeScriptInternalRep(Jim_Interp *interp, Jim_Obj *objPtr)$/;"	f
FreeSourceInternalRep	jim.c	/^void FreeSourceInternalRep(Jim_Interp *interp, Jim_Obj *objPtr)$/;"	f
HAVE_ARPA_INET_H	jimautoconf.h	/^#define HAVE_ARPA_INET_H /;"	d
HAVE_BACKTRACE	jimautoconf.h	/^#define HAVE_BACKTRACE /;"	d
HAVE_CRT_EXTERNS_H	jimautoconf.h	/^#define HAVE_CRT_EXTERNS_H /;"	d
HAVE_DECL_S_IRWXG	jimautoconf.h	/^#define HAVE_DECL_S_IRWXG /;"	d
HAVE_DECL_S_IRWXO	jimautoconf.h	/^#define HAVE_DECL_S_IRWXO /;"	d
HAVE_DECL_S_IXUSR	jimautoconf.h	/^#define HAVE_DECL_S_IXUSR /;"	d
HAVE_DIRENT_H	jimautoconf.h	/^#define HAVE_DIRENT_H /;"	d
HAVE_DLFCN_H	jimautoconf.h	/^#define HAVE_DLFCN_H /;"	d
HAVE_DLOPEN	jim-win32compat.h	/^#define HAVE_DLOPEN$/;"	d
HAVE_DLOPEN	jimautoconf.h	/^#define HAVE_DLOPEN /;"	d
HAVE_DUP	jimautoconf.h	/^#define HAVE_DUP /;"	d
HAVE_FCNTL_H	jimautoconf.h	/^#define HAVE_FCNTL_H /;"	d
HAVE_FORK	jimautoconf.h	/^#define HAVE_FORK /;"	d
HAVE_FSEEKO	jimautoconf.h	/^#define HAVE_FSEEKO /;"	d
HAVE_FSYNC	jimautoconf.h	/^#define HAVE_FSYNC /;"	d
HAVE_FTELLO	jimautoconf.h	/^#define HAVE_FTELLO /;"	d
HAVE_GETADDRINFO	jimautoconf.h	/^#define HAVE_GETADDRINFO /;"	d
HAVE_GETEUID	jimautoconf.h	/^#define HAVE_GETEUID /;"	d
HAVE_INET_NTOP	jimautoconf.h	/^#define HAVE_INET_NTOP /;"	d
HAVE_ISASCII	jimautoconf.h	/^#define HAVE_ISASCII /;"	d
HAVE_ISATTY	jimautoconf.h	/^#define HAVE_ISATTY /;"	d
HAVE_ISINF	jimautoconf.h	/^#define HAVE_ISINF /;"	d
HAVE_ISNAN	jimautoconf.h	/^#define HAVE_ISNAN /;"	d
HAVE_LFS	jimautoconf.h	/^#define HAVE_LFS /;"	d
HAVE_LINK	jimautoconf.h	/^#define HAVE_LINK /;"	d
HAVE_LONG_LONG	jim-config.h	/^#define HAVE_LONG_LONG /;"	d
HAVE_LONG_LONG	jimautoconf.h	/^#define HAVE_LONG_LONG /;"	d
HAVE_LSTAT	jimautoconf.h	/^#define HAVE_LSTAT /;"	d
HAVE_MKSTEMP	jimautoconf.h	/^#define HAVE_MKSTEMP /;"	d
HAVE_NETDB_H	jimautoconf.h	/^#define HAVE_NETDB_H /;"	d
HAVE_NETINET_IN_H	jimautoconf.h	/^#define HAVE_NETINET_IN_H /;"	d
HAVE_OPENDIR	jim-win32compat.h	/^#define HAVE_OPENDIR$/;"	d
HAVE_OPENDIR	jimautoconf.h	/^#define HAVE_OPENDIR /;"	d
HAVE_PIPE	jimautoconf.h	/^#define HAVE_PIPE /;"	d
HAVE_READLINK	jimautoconf.h	/^#define HAVE_READLINK /;"	d
HAVE_REALPATH	jimautoconf.h	/^#define HAVE_REALPATH /;"	d
HAVE_REGCOMP	jimautoconf.h	/^#define HAVE_REGCOMP /;"	d
HAVE_SELECT	jimautoconf.h	/^#define HAVE_SELECT /;"	d
HAVE_SHUTDOWN	jimautoconf.h	/^#define HAVE_SHUTDOWN /;"	d
HAVE_SIGACTION	jimautoconf.h	/^#define HAVE_SIGACTION /;"	d
HAVE_SLEEP	jimautoconf.h	/^#define HAVE_SLEEP /;"	d
HAVE_SOCKET	jimautoconf.h	/^#define HAVE_SOCKET /;"	d
HAVE_SOCKETPAIR	jimautoconf.h	/^#define HAVE_SOCKETPAIR /;"	d
HAVE_STDLIB_H	jimautoconf.h	/^#define HAVE_STDLIB_H /;"	d
HAVE_STRPTIME	jimautoconf.h	/^#define HAVE_STRPTIME /;"	d
HAVE_STRUCT_FLOCK	jimautoconf.h	/^#define HAVE_STRUCT_FLOCK /;"	d
HAVE_SYMLINK	jimautoconf.h	/^#define HAVE_SYMLINK /;"	d
HAVE_SYSLOG	jimautoconf.h	/^#define HAVE_SYSLOG /;"	d
HAVE_SYSTEM	jimautoconf.h	/^#define HAVE_SYSTEM /;"	d
HAVE_SYS_SIGLIST	jimautoconf.h	/^#define HAVE_SYS_SIGLIST /;"	d
HAVE_SYS_SIGNAME	jimautoconf.h	/^#define HAVE_SYS_SIGNAME /;"	d
HAVE_SYS_SOCKET_H	jimautoconf.h	/^#define HAVE_SYS_SOCKET_H /;"	d
HAVE_SYS_STAT_H	jimautoconf.h	/^#define HAVE_SYS_STAT_H /;"	d
HAVE_SYS_TIME_H	jimautoconf.h	/^#define HAVE_SYS_TIME_H /;"	d
HAVE_SYS_TYPES_H	jimautoconf.h	/^#define HAVE_SYS_TYPES_H /;"	d
HAVE_SYS_UN_H	jimautoconf.h	/^#define HAVE_SYS_UN_H /;"	d
HAVE_TERMIOS_H	jimautoconf.h	/^#define HAVE_TERMIOS_H /;"	d
HAVE_UALARM	jimautoconf.h	/^#define HAVE_UALARM /;"	d
HAVE_UMASK	jimautoconf.h	/^#define HAVE_UMASK /;"	d
HAVE_UNISTD_H	jimautoconf.h	/^#define HAVE_UNISTD_H /;"	d
HAVE_USLEEP	jimautoconf.h	/^#define HAVE_USLEEP /;"	d
HAVE_UTIMES	jimautoconf.h	/^#define HAVE_UTIMES /;"	d
HAVE_VFORK	jimautoconf.h	/^#define HAVE_VFORK /;"	d
HAVE_WAITPID	jimautoconf.h	/^#define HAVE_WAITPID /;"	d
HAVE__NSGETENVIRON	jimautoconf.h	/^#define HAVE__NSGETENVIRON /;"	d
HEX	build/CMakeFiles/3.6.1/CompilerIdC/CMakeCCompilerId.c	/^#define HEX(/;"	d	file:
HEX	build/CMakeFiles/3.6.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#define HEX(/;"	d	file:
ID_VOID_MAIN	build/CMakeFiles/3.6.1/CompilerIdC/CMakeCCompilerId.c	/^# define ID_VOID_MAIN$/;"	d	file:
JIM_BREAK	jim.h	/^#define JIM_BREAK /;"	d
JIM_CASESENS	jim.h	/^#define JIM_CASESENS /;"	d
JIM_CHARSET_GLOB	jim.c	/^#define JIM_CHARSET_GLOB /;"	d	file:
JIM_CHARSET_SCAN	jim.c	/^#define JIM_CHARSET_SCAN /;"	d	file:
JIM_CMDLIST_CHANNELS	jim.c	/^#define JIM_CMDLIST_CHANNELS /;"	d	file:
JIM_CMDLIST_COMMANDS	jim.c	/^#define JIM_CMDLIST_COMMANDS /;"	d	file:
JIM_CMDLIST_PROCS	jim.c	/^#define JIM_CMDLIST_PROCS /;"	d	file:
JIM_COLLECT_ID_PERIOD	jim.c	/^#define JIM_COLLECT_ID_PERIOD /;"	d	file:
JIM_COLLECT_TIME_PERIOD	jim.c	/^#define JIM_COLLECT_TIME_PERIOD /;"	d	file:
JIM_CONTINUE	jim.h	/^#define JIM_CONTINUE /;"	d
JIM_DEBUG_COMMAND	jim.c	/^#define JIM_DEBUG_COMMAND$/;"	d	file:
JIM_DEBUG_PANIC	jim.c	/^#define JIM_DEBUG_PANIC$/;"	d	file:
JIM_DICTMATCH_VALUES	jim.c	/^#define JIM_DICTMATCH_VALUES /;"	d	file:
JIM_DICT_SUGAR	jim.c	/^#define JIM_DICT_SUGAR /;"	d	file:
JIM_DOCS	jimautoconf.h	/^#define JIM_DOCS /;"	d
JIM_DOUBLE_SPACE	jim.c	/^#define JIM_DOUBLE_SPACE /;"	d	file:
JIM_EE_STATICSTACK_LEN	jim.c	/^#define JIM_EE_STATICSTACK_LEN /;"	d	file:
JIM_ELESTR_BRACE	jim.c	/^#define JIM_ELESTR_BRACE /;"	d	file:
JIM_ELESTR_QUOTE	jim.c	/^#define JIM_ELESTR_QUOTE /;"	d	file:
JIM_ELESTR_SIMPLE	jim.c	/^#define JIM_ELESTR_SIMPLE /;"	d	file:
JIM_ENUM_ABBREV	jim.h	/^#define JIM_ENUM_ABBREV /;"	d
JIM_ERR	jim.h	/^#define JIM_ERR /;"	d
JIM_ERRMSG	jim.h	/^#define JIM_ERRMSG /;"	d
JIM_EVAL	jim.h	/^#define JIM_EVAL /;"	d
JIM_EVAL_SARGV_LEN	jim.c	/^#define JIM_EVAL_SARGV_LEN /;"	d	file:
JIM_EVAL_SINTV_LEN	jim.c	/^#define JIM_EVAL_SINTV_LEN /;"	d	file:
JIM_EXIT	jim.h	/^#define JIM_EXIT /;"	d
JIM_EXPORT	jim.h	/^#define JIM_EXPORT$/;"	d
JIM_EXPROP_ADD	jim.c	/^    JIM_EXPROP_ADD,$/;"	e	enum:__anon4	file:
JIM_EXPROP_BITAND	jim.c	/^    JIM_EXPROP_BITAND,          \/* 35 *\/$/;"	e	enum:__anon4	file:
JIM_EXPROP_BITNOT	jim.c	/^    JIM_EXPROP_BITNOT,$/;"	e	enum:__anon4	file:
JIM_EXPROP_BITOR	jim.c	/^    JIM_EXPROP_BITOR,$/;"	e	enum:__anon4	file:
JIM_EXPROP_BITXOR	jim.c	/^    JIM_EXPROP_BITXOR,$/;"	e	enum:__anon4	file:
JIM_EXPROP_COLON	jim.c	/^    JIM_EXPROP_COLON,           \/* 47 *\/$/;"	e	enum:__anon4	file:
JIM_EXPROP_COLON_LEFT	jim.c	/^    JIM_EXPROP_COLON_LEFT,$/;"	e	enum:__anon4	file:
JIM_EXPROP_COLON_RIGHT	jim.c	/^    JIM_EXPROP_COLON_RIGHT,$/;"	e	enum:__anon4	file:
JIM_EXPROP_DIV	jim.c	/^    JIM_EXPROP_DIV,$/;"	e	enum:__anon4	file:
JIM_EXPROP_FUNC_ABS	jim.c	/^    JIM_EXPROP_FUNC_ABS,$/;"	e	enum:__anon4	file:
JIM_EXPROP_FUNC_ACOS	jim.c	/^    JIM_EXPROP_FUNC_ACOS,$/;"	e	enum:__anon4	file:
JIM_EXPROP_FUNC_ASIN	jim.c	/^    JIM_EXPROP_FUNC_ASIN,$/;"	e	enum:__anon4	file:
JIM_EXPROP_FUNC_ATAN	jim.c	/^    JIM_EXPROP_FUNC_ATAN,$/;"	e	enum:__anon4	file:
JIM_EXPROP_FUNC_ATAN2	jim.c	/^    JIM_EXPROP_FUNC_ATAN2,$/;"	e	enum:__anon4	file:
JIM_EXPROP_FUNC_CEIL	jim.c	/^    JIM_EXPROP_FUNC_CEIL,$/;"	e	enum:__anon4	file:
JIM_EXPROP_FUNC_COS	jim.c	/^    JIM_EXPROP_FUNC_COS,$/;"	e	enum:__anon4	file:
JIM_EXPROP_FUNC_COSH	jim.c	/^    JIM_EXPROP_FUNC_COSH,$/;"	e	enum:__anon4	file:
JIM_EXPROP_FUNC_DOUBLE	jim.c	/^    JIM_EXPROP_FUNC_DOUBLE,$/;"	e	enum:__anon4	file:
JIM_EXPROP_FUNC_EXP	jim.c	/^    JIM_EXPROP_FUNC_EXP,$/;"	e	enum:__anon4	file:
JIM_EXPROP_FUNC_FIRST	jim.c	/^    JIM_EXPROP_FUNC_FIRST,      \/* 59 *\/$/;"	e	enum:__anon4	file:
JIM_EXPROP_FUNC_FLOOR	jim.c	/^    JIM_EXPROP_FUNC_FLOOR,$/;"	e	enum:__anon4	file:
JIM_EXPROP_FUNC_FMOD	jim.c	/^    JIM_EXPROP_FUNC_FMOD,$/;"	e	enum:__anon4	file:
JIM_EXPROP_FUNC_HYPOT	jim.c	/^    JIM_EXPROP_FUNC_HYPOT,$/;"	e	enum:__anon4	file:
JIM_EXPROP_FUNC_INT	jim.c	/^    JIM_EXPROP_FUNC_INT = JIM_EXPROP_FUNC_FIRST,$/;"	e	enum:__anon4	file:
JIM_EXPROP_FUNC_LOG	jim.c	/^    JIM_EXPROP_FUNC_LOG,$/;"	e	enum:__anon4	file:
JIM_EXPROP_FUNC_LOG10	jim.c	/^    JIM_EXPROP_FUNC_LOG10,$/;"	e	enum:__anon4	file:
JIM_EXPROP_FUNC_POW	jim.c	/^    JIM_EXPROP_FUNC_POW,$/;"	e	enum:__anon4	file:
JIM_EXPROP_FUNC_RAND	jim.c	/^    JIM_EXPROP_FUNC_RAND,$/;"	e	enum:__anon4	file:
JIM_EXPROP_FUNC_ROUND	jim.c	/^    JIM_EXPROP_FUNC_ROUND,$/;"	e	enum:__anon4	file:
JIM_EXPROP_FUNC_SIN	jim.c	/^    JIM_EXPROP_FUNC_SIN,        \/* 65 *\/$/;"	e	enum:__anon4	file:
JIM_EXPROP_FUNC_SINH	jim.c	/^    JIM_EXPROP_FUNC_SINH,$/;"	e	enum:__anon4	file:
JIM_EXPROP_FUNC_SQRT	jim.c	/^    JIM_EXPROP_FUNC_SQRT,$/;"	e	enum:__anon4	file:
JIM_EXPROP_FUNC_SRAND	jim.c	/^    JIM_EXPROP_FUNC_SRAND,$/;"	e	enum:__anon4	file:
JIM_EXPROP_FUNC_TAN	jim.c	/^    JIM_EXPROP_FUNC_TAN,$/;"	e	enum:__anon4	file:
JIM_EXPROP_FUNC_TANH	jim.c	/^    JIM_EXPROP_FUNC_TANH,$/;"	e	enum:__anon4	file:
JIM_EXPROP_FUNC_WIDE	jim.c	/^    JIM_EXPROP_FUNC_WIDE,$/;"	e	enum:__anon4	file:
JIM_EXPROP_GT	jim.c	/^    JIM_EXPROP_GT,$/;"	e	enum:__anon4	file:
JIM_EXPROP_GTE	jim.c	/^    JIM_EXPROP_GTE,$/;"	e	enum:__anon4	file:
JIM_EXPROP_LOGICAND	jim.c	/^    JIM_EXPROP_LOGICAND,        \/* 38 *\/$/;"	e	enum:__anon4	file:
JIM_EXPROP_LOGICAND_LEFT	jim.c	/^    JIM_EXPROP_LOGICAND_LEFT,$/;"	e	enum:__anon4	file:
JIM_EXPROP_LOGICAND_RIGHT	jim.c	/^    JIM_EXPROP_LOGICAND_RIGHT,$/;"	e	enum:__anon4	file:
JIM_EXPROP_LOGICOR	jim.c	/^    JIM_EXPROP_LOGICOR,         \/* 41 *\/$/;"	e	enum:__anon4	file:
JIM_EXPROP_LOGICOR_LEFT	jim.c	/^    JIM_EXPROP_LOGICOR_LEFT,$/;"	e	enum:__anon4	file:
JIM_EXPROP_LOGICOR_RIGHT	jim.c	/^    JIM_EXPROP_LOGICOR_RIGHT,$/;"	e	enum:__anon4	file:
JIM_EXPROP_LSHIFT	jim.c	/^    JIM_EXPROP_LSHIFT,$/;"	e	enum:__anon4	file:
JIM_EXPROP_LT	jim.c	/^    JIM_EXPROP_LT,$/;"	e	enum:__anon4	file:
JIM_EXPROP_LTE	jim.c	/^    JIM_EXPROP_LTE,$/;"	e	enum:__anon4	file:
JIM_EXPROP_MOD	jim.c	/^    JIM_EXPROP_MOD,$/;"	e	enum:__anon4	file:
JIM_EXPROP_MUL	jim.c	/^    JIM_EXPROP_MUL = JIM_TT_EXPR_OP,             \/* 20 *\/$/;"	e	enum:__anon4	file:
JIM_EXPROP_NOT	jim.c	/^    JIM_EXPROP_NOT,             \/* 55 *\/$/;"	e	enum:__anon4	file:
JIM_EXPROP_NUMEQ	jim.c	/^    JIM_EXPROP_NUMEQ,$/;"	e	enum:__anon4	file:
JIM_EXPROP_NUMNE	jim.c	/^    JIM_EXPROP_NUMNE,$/;"	e	enum:__anon4	file:
JIM_EXPROP_POW	jim.c	/^    JIM_EXPROP_POW,             \/* 50 *\/$/;"	e	enum:__anon4	file:
JIM_EXPROP_ROTL	jim.c	/^    JIM_EXPROP_ROTL,$/;"	e	enum:__anon4	file:
JIM_EXPROP_ROTR	jim.c	/^    JIM_EXPROP_ROTR,$/;"	e	enum:__anon4	file:
JIM_EXPROP_RSHIFT	jim.c	/^    JIM_EXPROP_RSHIFT,$/;"	e	enum:__anon4	file:
JIM_EXPROP_STREQ	jim.c	/^    JIM_EXPROP_STREQ,           \/* 51 *\/$/;"	e	enum:__anon4	file:
JIM_EXPROP_STRIN	jim.c	/^    JIM_EXPROP_STRIN,$/;"	e	enum:__anon4	file:
JIM_EXPROP_STRNE	jim.c	/^    JIM_EXPROP_STRNE,$/;"	e	enum:__anon4	file:
JIM_EXPROP_STRNI	jim.c	/^    JIM_EXPROP_STRNI,$/;"	e	enum:__anon4	file:
JIM_EXPROP_SUB	jim.c	/^    JIM_EXPROP_SUB,$/;"	e	enum:__anon4	file:
JIM_EXPROP_TERNARY	jim.c	/^    JIM_EXPROP_TERNARY,         \/* 44 *\/$/;"	e	enum:__anon4	file:
JIM_EXPROP_TERNARY_LEFT	jim.c	/^    JIM_EXPROP_TERNARY_LEFT,$/;"	e	enum:__anon4	file:
JIM_EXPROP_TERNARY_RIGHT	jim.c	/^    JIM_EXPROP_TERNARY_RIGHT,$/;"	e	enum:__anon4	file:
JIM_EXPROP_UNARYMINUS	jim.c	/^    JIM_EXPROP_UNARYMINUS,$/;"	e	enum:__anon4	file:
JIM_EXPROP_UNARYPLUS	jim.c	/^    JIM_EXPROP_UNARYPLUS,$/;"	e	enum:__anon4	file:
JIM_EXPR_OPERATORS_NUM	jim.c	/^#define JIM_EXPR_OPERATORS_NUM /;"	d	file:
JIM_FCF_FULL	jim.c	/^#define JIM_FCF_FULL /;"	d	file:
JIM_FCF_REUSE	jim.c	/^#define JIM_FCF_REUSE /;"	d	file:
JIM_HT_INITIAL_SIZE	jim.h	/^#define JIM_HT_INITIAL_SIZE /;"	d
JIM_IF_OPTIM	jim.c	/^#define JIM_IF_OPTIM(/;"	d	file:
JIM_INSTALL	jimautoconf.h	/^#define JIM_INSTALL /;"	d
JIM_INTEGER_SPACE	jim-format.c	/^#define JIM_INTEGER_SPACE /;"	d	file:
JIM_INTEGER_SPACE	jim.c	/^#define JIM_INTEGER_SPACE /;"	d	file:
JIM_INTERACTIVE	jim.h	/^#define JIM_INTERACTIVE /;"	d
JIM_LIBPATH	jim.h	/^#define JIM_LIBPATH /;"	d
JIM_LSORT_ASCII	jim.c	/^        JIM_LSORT_ASCII,$/;"	e	enum:lsort_info::__anon3	file:
JIM_LSORT_COMMAND	jim.c	/^        JIM_LSORT_COMMAND$/;"	e	enum:lsort_info::__anon3	file:
JIM_LSORT_INTEGER	jim.c	/^        JIM_LSORT_INTEGER,$/;"	e	enum:lsort_info::__anon3	file:
JIM_LSORT_NOCASE	jim.c	/^        JIM_LSORT_NOCASE,$/;"	e	enum:lsort_info::__anon3	file:
JIM_LSORT_REAL	jim.c	/^        JIM_LSORT_REAL,$/;"	e	enum:lsort_info::__anon3	file:
JIM_MAX_CALLFRAME_DEPTH	jim.h	/^#define JIM_MAX_CALLFRAME_DEPTH /;"	d
JIM_MAX_EVAL_DEPTH	jim.h	/^#define JIM_MAX_EVAL_DEPTH /;"	d
JIM_MUSTEXIST	jim.h	/^#define JIM_MUSTEXIST /;"	d
JIM_NOCASE	jim.h	/^#define JIM_NOCASE /;"	d
JIM_NONE	jim.h	/^#define JIM_NONE /;"	d
JIM_NOTUSED	jim.h	/^#define JIM_NOTUSED(/;"	d
JIM_OK	jim.h	/^#define JIM_OK /;"	d
JIM_OPTIMIZATION	jim.c	/^#define JIM_OPTIMIZATION /;"	d	file:
JIM_PATH_LEN	jim.h	/^#define JIM_PATH_LEN /;"	d
JIM_PRIV_FLAG_SHIFT	jim.h	/^#define JIM_PRIV_FLAG_SHIFT /;"	d
JIM_REFERENCES	jimautoconf.h	/^#define JIM_REFERENCES /;"	d
JIM_REFERENCE_SPACE	jim.c	/^#define JIM_REFERENCE_SPACE /;"	d	file:
JIM_REFERENCE_TAGLEN	jim.h	/^#define JIM_REFERENCE_TAGLEN /;"	d
JIM_REGEXP	jimautoconf.h	/^#define JIM_REGEXP /;"	d
JIM_RETURN	jim.h	/^#define JIM_RETURN /;"	d
JIM_SIGNAL	jim.h	/^#define JIM_SIGNAL /;"	d
JIM_SPRINTF_DOUBLE_NEEDS_FIX	jim-win32compat.h	/^    #define JIM_SPRINTF_DOUBLE_NEEDS_FIX$/;"	d
JIM_STATICLIB	jimautoconf.h	/^#define JIM_STATICLIB /;"	d
JIM_SUBST_FLAG	jim.h	/^#define JIM_SUBST_FLAG /;"	d
JIM_SUBST_NOCMD	jim.h	/^#define JIM_SUBST_NOCMD /;"	d
JIM_SUBST_NOESC	jim.h	/^#define JIM_SUBST_NOESC /;"	d
JIM_SUBST_NOVAR	jim.h	/^#define JIM_SUBST_NOVAR /;"	d
JIM_TT_CMD	jim.c	/^#define JIM_TT_CMD /;"	d	file:
JIM_TT_DICTSUGAR	jim.c	/^#define JIM_TT_DICTSUGAR /;"	d	file:
JIM_TT_EOF	jim.c	/^#define JIM_TT_EOF /;"	d	file:
JIM_TT_EOL	jim.c	/^#define JIM_TT_EOL /;"	d	file:
JIM_TT_ESC	jim.c	/^#define JIM_TT_ESC /;"	d	file:
JIM_TT_EXPRSUGAR	jim.c	/^#define JIM_TT_EXPRSUGAR /;"	d	file:
JIM_TT_EXPR_BOOLEAN	jim.c	/^#define JIM_TT_EXPR_BOOLEAN /;"	d	file:
JIM_TT_EXPR_DOUBLE	jim.c	/^#define JIM_TT_EXPR_DOUBLE /;"	d	file:
JIM_TT_EXPR_INT	jim.c	/^#define JIM_TT_EXPR_INT /;"	d	file:
JIM_TT_EXPR_OP	jim.c	/^#define JIM_TT_EXPR_OP /;"	d	file:
JIM_TT_LINE	jim.c	/^#define JIM_TT_LINE /;"	d	file:
JIM_TT_NONE	jim.c	/^#define JIM_TT_NONE /;"	d	file:
JIM_TT_SEP	jim.c	/^#define JIM_TT_SEP /;"	d	file:
JIM_TT_STR	jim.c	/^#define JIM_TT_STR /;"	d	file:
JIM_TT_SUBEXPR_COMMA	jim.c	/^#define JIM_TT_SUBEXPR_COMMA /;"	d	file:
JIM_TT_SUBEXPR_END	jim.c	/^#define JIM_TT_SUBEXPR_END /;"	d	file:
JIM_TT_SUBEXPR_START	jim.c	/^#define JIM_TT_SUBEXPR_START /;"	d	file:
JIM_TT_VAR	jim.c	/^#define JIM_TT_VAR /;"	d	file:
JIM_TT_WORD	jim.c	/^#define JIM_TT_WORD /;"	d	file:
JIM_TYPE_NONE	jim.h	/^#define JIM_TYPE_NONE /;"	d
JIM_TYPE_REFERENCES	jim.h	/^#define JIM_TYPE_REFERENCES /;"	d
JIM_UNSHARED	jim.h	/^#define JIM_UNSHARED /;"	d
JIM_VARLIST_GLOBALS	jim.c	/^#define JIM_VARLIST_GLOBALS /;"	d	file:
JIM_VARLIST_LOCALS	jim.c	/^#define JIM_VARLIST_LOCALS /;"	d	file:
JIM_VARLIST_VALUES	jim.c	/^#define JIM_VARLIST_VALUES /;"	d	file:
JIM_VARLIST_VARS	jim.c	/^#define JIM_VARLIST_VARS /;"	d	file:
JIM_VERSION	jim-config.h	/^#define JIM_VERSION /;"	d
JIM_VERSION	jimautoconf.h	/^#define JIM_VERSION /;"	d
JIM_WIDE_MAX	jim-win32compat.h	/^#define JIM_WIDE_MAX /;"	d
JIM_WIDE_MAX	jim.h	/^#    define JIM_WIDE_MAX /;"	d
JIM_WIDE_MIN	jim-win32compat.h	/^#define JIM_WIDE_MIN /;"	d
JIM_WIDE_MIN	jim.h	/^#    define JIM_WIDE_MIN /;"	d
JIM_WIDE_MODIFIER	jim-win32compat.h	/^#define JIM_WIDE_MODIFIER /;"	d
JIM_WIDE_MODIFIER	jim.h	/^#    define JIM_WIDE_MODIFIER /;"	d
JIM_WIN32COMPAT_H	jim-win32compat.h	/^#define JIM_WIN32COMPAT_H$/;"	d
JimAddErrorToStack	jim.c	/^static void JimAddErrorToStack(Jim_Interp *interp, ScriptObj *script)$/;"	f	file:
JimAddMulHelper	jim.c	/^static int JimAddMulHelper(Jim_Interp *interp, int argc, Jim_Obj *const *argv, int op)$/;"	f	file:
JimAliasCmd	jim.c	/^static int JimAliasCmd(Jim_Interp *interp, int argc, Jim_Obj *const *argv)$/;"	f	file:
JimAliasCmdDelete	jim.c	/^static void JimAliasCmdDelete(Jim_Interp *interp, void *privData)$/;"	f	file:
JimAppendStackTrace	jim.c	/^static void JimAppendStackTrace(Jim_Interp *interp, const char *procname,$/;"	f	file:
JimAssocDataHashTableType	jim.c	/^static const Jim_HashTableType JimAssocDataHashTableType = {$/;"	v	file:
JimAssocDataHashTableValueDestructor	jim.c	/^static void JimAssocDataHashTableValueDestructor(void *privdata, void *data)$/;"	f	file:
JimCallProcedure	jim.c	/^static int JimCallProcedure(Jim_Interp *interp, Jim_Cmd *cmd, int argc, Jim_Obj *const *argv)$/;"	f	file:
JimCharsetMatch	jim.c	/^static const char *JimCharsetMatch(const char *pattern, int c, int flags)$/;"	f	file:
JimCheckConversion	jim.c	/^static int JimCheckConversion(const char *str, const char *endptr)$/;"	f	file:
JimClock	jim.c	/^static jim_wide JimClock(void)$/;"	f	file:
JimCommandMatch	jim.c	/^static void JimCommandMatch(Jim_Interp *interp, Jim_Obj *listObjPtr,$/;"	f	file:
JimCommandsHT_ValDestructor	jim.c	/^static void JimCommandsHT_ValDestructor(void *interp, void *val)$/;"	f	file:
JimCommandsHashTableType	jim.c	/^static const Jim_HashTableType JimCommandsHashTableType = {$/;"	v	file:
JimCommandsList	jim.c	/^static Jim_Obj *JimCommandsList(Jim_Interp *interp, Jim_Obj *patternObjPtr, int type)$/;"	f	file:
JimCountWordTokens	jim.c	/^static int JimCountWordTokens(ParseToken *t)$/;"	f	file:
JimCreateCallFrame	jim.c	/^static Jim_CallFrame *JimCreateCallFrame(Jim_Interp *interp, Jim_CallFrame *parent, Jim_Obj *nsObj)$/;"	f	file:
JimCreateCommand	jim.c	/^static int JimCreateCommand(Jim_Interp *interp, const char *name, Jim_Cmd *cmd)$/;"	f	file:
JimCreateProcedureCmd	jim.c	/^static Jim_Cmd *JimCreateProcedureCmd(Jim_Interp *interp, Jim_Obj *argListObjPtr,$/;"	f	file:
JimCreateProcedureStatics	jim.c	/^static int JimCreateProcedureStatics(Jim_Interp *interp, Jim_Cmd *cmdPtr, Jim_Obj *staticsListObjPtr)$/;"	f	file:
JimCreateVariable	jim.c	/^static Jim_Var *JimCreateVariable(Jim_Interp *interp, Jim_Obj *nameObjPtr, Jim_Obj *valObjPtr)$/;"	f	file:
JimDecrCmdRefCount	jim.c	/^static void JimDecrCmdRefCount(Jim_Interp *interp, Jim_Cmd *cmdPtr)$/;"	f	file:
JimDeleteLocalProcs	jim.c	/^static int JimDeleteLocalProcs(Jim_Interp *interp, Jim_Stack *localCommands)$/;"	f	file:
JimDictExpandArrayVariable	jim.c	/^static Jim_Obj *JimDictExpandArrayVariable(Jim_Interp *interp, Jim_Obj *varObjPtr,$/;"	f	file:
JimDictHashTableType	jim.c	/^static const Jim_HashTableType JimDictHashTableType = {$/;"	v	file:
JimDictMatchCallbackType	jim.c	/^typedef void JimDictMatchCallbackType(Jim_Interp *interp, Jim_Obj *listObjPtr, Jim_HashEntry *he, int type);$/;"	t	file:
JimDictMatchKeys	jim.c	/^static void JimDictMatchKeys(Jim_Interp *interp, Jim_Obj *listObjPtr, Jim_HashEntry *he, int type)$/;"	f	file:
JimDictPairs	jim.c	/^static Jim_Obj **JimDictPairs(Jim_Obj *dictPtr, int *len)$/;"	f	file:
JimDictPatternMatch	jim.c	/^static Jim_Obj *JimDictPatternMatch(Jim_Interp *interp, Jim_HashTable *ht, Jim_Obj *patternObjPtr,$/;"	f	file:
JimDictSugarGet	jim.c	/^static Jim_Obj *JimDictSugarGet(Jim_Interp *interp, Jim_Obj *objPtr, int flags)$/;"	f	file:
JimDictSugarParseVarKey	jim.c	/^static void JimDictSugarParseVarKey(Jim_Interp *interp, Jim_Obj *objPtr,$/;"	f	file:
JimDictSugarSet	jim.c	/^static int JimDictSugarSet(Jim_Interp *interp, Jim_Obj *objPtr, Jim_Obj *valObjPtr)$/;"	f	file:
JimDictWith	jim.c	/^static int JimDictWith(Jim_Interp *interp, Jim_Obj *dictVarName, Jim_Obj *const *keyv, int keyc, Jim_Obj *scriptObj)$/;"	f	file:
JimEmptyStringRep	jim.c	/^static char JimEmptyStringRep[] = "";$/;"	v	file:
JimEscape	jim.c	/^static int JimEscape(char *dest, const char *s, int slen)$/;"	f	file:
JimEvalObjList	jim.c	/^static int JimEvalObjList(Jim_Interp *interp, Jim_Obj *listPtr)$/;"	f	file:
JimExpandDictSugar	jim.c	/^static Jim_Obj *JimExpandDictSugar(Jim_Interp *interp, Jim_Obj *objPtr)$/;"	f	file:
JimExpandExprSugar	jim.c	/^static Jim_Obj *JimExpandExprSugar(Jim_Interp *interp, Jim_Obj *objPtr)$/;"	f	file:
JimExpandHashTableIfNeeded	jim.c	/^static void JimExpandHashTableIfNeeded(Jim_HashTable *ht)$/;"	f	file:
JimExprIntValOrVar	jim.c	/^static Jim_Obj *JimExprIntValOrVar(Jim_Interp *interp, const ScriptToken *token)$/;"	f	file:
JimExprOpAndLeft	jim.c	/^static int JimExprOpAndLeft(Jim_Interp *interp, struct JimExprState *e)$/;"	f	file:
JimExprOpAndOrRight	jim.c	/^static int JimExprOpAndOrRight(Jim_Interp *interp, struct JimExprState *e)$/;"	f	file:
JimExprOpBin	jim.c	/^static int JimExprOpBin(Jim_Interp *interp, struct JimExprState *e)$/;"	f	file:
JimExprOpColonLeft	jim.c	/^static int JimExprOpColonLeft(Jim_Interp *interp, struct JimExprState *e)$/;"	f	file:
JimExprOpDoubleUnary	jim.c	/^static int JimExprOpDoubleUnary(Jim_Interp *interp, struct JimExprState *e)$/;"	f	file:
JimExprOpIntBin	jim.c	/^static int JimExprOpIntBin(Jim_Interp *interp, struct JimExprState *e)$/;"	f	file:
JimExprOpIntUnary	jim.c	/^static int JimExprOpIntUnary(Jim_Interp *interp, struct JimExprState *e)$/;"	f	file:
JimExprOpNone	jim.c	/^static int JimExprOpNone(Jim_Interp *interp, struct JimExprState *e)$/;"	f	file:
JimExprOpNull	jim.c	/^static int JimExprOpNull(Jim_Interp *interp, struct JimExprState *e)$/;"	f	file:
JimExprOpNumUnary	jim.c	/^static int JimExprOpNumUnary(Jim_Interp *interp, struct JimExprState *e)$/;"	f	file:
JimExprOpOrLeft	jim.c	/^static int JimExprOpOrLeft(Jim_Interp *interp, struct JimExprState *e)$/;"	f	file:
JimExprOpStrBin	jim.c	/^static int JimExprOpStrBin(Jim_Interp *interp, struct JimExprState *e)$/;"	f	file:
JimExprOpTernaryLeft	jim.c	/^static int JimExprOpTernaryLeft(Jim_Interp *interp, struct JimExprState *e)$/;"	f	file:
JimExprOperatorInfoByOpcode	jim.c	/^static const struct Jim_ExprOperator *JimExprOperatorInfoByOpcode(int opcode)$/;"	f	file:
JimExprState	jim.c	/^struct JimExprState$/;"	s	file:
JimFindTrimLeft	jim.c	/^static const char *JimFindTrimLeft(const char *str, int len, const char *trimchars, int trimlen)$/;"	f	file:
JimFindTrimRight	jim.c	/^static const char *JimFindTrimRight(const char *str, int len, const char *trimchars, int trimlen)$/;"	f	file:
JimForeachMapHelper	jim.c	/^static int JimForeachMapHelper(Jim_Interp *interp, int argc, Jim_Obj *const *argv, int doMap)$/;"	f	file:
JimFormatReference	jim.c	/^static int JimFormatReference(char *buf, Jim_Reference *refPtr, unsigned long id)$/;"	f	file:
JimFreeCallFrame	jim.c	/^static void JimFreeCallFrame(Jim_Interp *interp, Jim_CallFrame *cf, int action)$/;"	f	file:
JimFreeQualifiedName	jim.c	/^    #define JimFreeQualifiedName(/;"	d	file:
JimGetCallFrameByInteger	jim.c	/^static Jim_CallFrame *JimGetCallFrameByInteger(Jim_Interp *interp, Jim_Obj *levelObjPtr)$/;"	f	file:
JimGetExpression	jim.c	/^static ExprByteCode *JimGetExpression(Jim_Interp *interp, Jim_Obj *objPtr)$/;"	f	file:
JimGetScript	jim.c	/^static ScriptObj *JimGetScript(Jim_Interp *interp, Jim_Obj *objPtr)$/;"	f	file:
JimGetWideNoErr	jim.c	/^static int JimGetWideNoErr(Jim_Interp *interp, Jim_Obj *objPtr, jim_wide * widePtr)$/;"	f	file:
JimGlobMatch	jim.c	/^static int JimGlobMatch(const char *pattern, const char *string, int nocase)$/;"	f	file:
JimHashTableNextPower	jim.c	/^static unsigned int JimHashTableNextPower(unsigned int size)$/;"	f	file:
JimHashtableIteratorCallbackType	jim.c	/^typedef void JimHashtableIteratorCallbackType(Jim_Interp *interp, Jim_Obj *listObjPtr,$/;"	t	file:
JimHashtablePatternMatch	jim.c	/^static Jim_Obj *JimHashtablePatternMatch(Jim_Interp *interp, Jim_HashTable *ht, Jim_Obj *patternObjPtr,$/;"	f	file:
JimIncrCmdRefCount	jim.c	/^static void JimIncrCmdRefCount(Jim_Cmd *cmdPtr)$/;"	f	file:
JimInfoLevel	jim.c	/^static int JimInfoLevel(Jim_Interp *interp, Jim_Obj *levelObjPtr,$/;"	f	file:
JimInfoReferences	jim.c	/^static int JimInfoReferences(Jim_Interp *interp, int argc, Jim_Obj *const *argv)$/;"	f	file:
JimInitHashTableIterator	jim.c	/^static void JimInitHashTableIterator(Jim_HashTable *ht, Jim_HashTableIterator *iter)$/;"	f	file:
JimInsertHashEntry	jim.c	/^static Jim_HashEntry *JimInsertHashEntry(Jim_HashTable *ht, const void *key, int replace)$/;"	f	file:
JimInterpolateTokens	jim.c	/^static Jim_Obj *JimInterpolateTokens(Jim_Interp *interp, const ScriptToken * token, int tokens, int flags)$/;"	f	file:
JimInvokeCommand	jim.c	/^static int JimInvokeCommand(Jim_Interp *interp, int objc, Jim_Obj *const *objv)$/;"	f	file:
JimIsWide	jim.c	/^static int JimIsWide(Jim_Obj *objPtr)$/;"	f	file:
JimListGetElements	jim.c	/^static void JimListGetElements(Jim_Interp *interp, Jim_Obj *listObj, int *listLen,$/;"	f	file:
JimListIterDone	jim.c	/^static int JimListIterDone(Jim_Interp *interp, Jim_ListIter *iter)$/;"	f	file:
JimListIterInit	jim.c	/^static void JimListIterInit(Jim_ListIter *iter, Jim_Obj *objPtr)$/;"	f	file:
JimListIterNext	jim.c	/^static Jim_Obj *JimListIterNext(Jim_Interp *interp, Jim_ListIter *iter)$/;"	f	file:
JimMakeListStringRep	jim.c	/^static void JimMakeListStringRep(Jim_Obj *objPtr, Jim_Obj **objv, int objc)$/;"	f	file:
JimMakeScriptObj	jim.c	/^static Jim_Obj *JimMakeScriptObj(Jim_Interp *interp, const ParseToken *t)$/;"	f	file:
JimNewScriptLineObj	jim.c	/^static Jim_Obj *JimNewScriptLineObj(Jim_Interp *interp, int argc, int line)$/;"	f	file:
JimNumberBase	jim.c	/^static int JimNumberBase(const char *str, int *base, int *sign)$/;"	f	file:
JimObjTypeName	jim.c	/^#define JimObjTypeName(/;"	d	file:
JimObjectHTHashFunction	jim.c	/^static unsigned int JimObjectHTHashFunction(const void *key)$/;"	f	file:
JimObjectHTKeyCompare	jim.c	/^static int JimObjectHTKeyCompare(void *privdata, const void *key1, const void *key2)$/;"	f	file:
JimObjectHTKeyValDestructor	jim.c	/^static void JimObjectHTKeyValDestructor(void *interp, void *val)$/;"	f	file:
JimObjectHTKeyValDup	jim.c	/^static void *JimObjectHTKeyValDup(void *privdata, const void *val)$/;"	f	file:
JimPackageHashTableType	jim.c	/^static const Jim_HashTableType JimPackageHashTableType = {$/;"	v	file:
JimPanic	jim.c	/^#define JimPanic(/;"	d	file:
JimPanicDump	jim.c	/^static void JimPanicDump(int condition, const char *fmt, ...)$/;"	f	file:
JimParseBrace	jim.c	/^static int JimParseBrace(struct JimParserCtx *pc)$/;"	f	file:
JimParseCheckMissing	jim.c	/^static int JimParseCheckMissing(Jim_Interp *interp, int ch)$/;"	f	file:
JimParseCmd	jim.c	/^static int JimParseCmd(struct JimParserCtx *pc)$/;"	f	file:
JimParseComment	jim.c	/^static int JimParseComment(struct JimParserCtx *pc)$/;"	f	file:
JimParseEol	jim.c	/^static int JimParseEol(struct JimParserCtx *pc)$/;"	f	file:
JimParseExprBoolean	jim.c	/^static int JimParseExprBoolean(struct JimParserCtx *pc)$/;"	f	file:
JimParseExprIrrational	jim.c	/^static int JimParseExprIrrational(struct JimParserCtx *pc)$/;"	f	file:
JimParseExprNumber	jim.c	/^static int JimParseExprNumber(struct JimParserCtx *pc)$/;"	f	file:
JimParseExprOperator	jim.c	/^static int JimParseExprOperator(struct JimParserCtx *pc)$/;"	f	file:
JimParseExpression	jim.c	/^static int JimParseExpression(struct JimParserCtx *pc)$/;"	f	file:
JimParseList	jim.c	/^static int JimParseList(struct JimParserCtx *pc)$/;"	f	file:
JimParseListQuote	jim.c	/^static int JimParseListQuote(struct JimParserCtx *pc)$/;"	f	file:
JimParseListSep	jim.c	/^static int JimParseListSep(struct JimParserCtx *pc)$/;"	f	file:
JimParseListStr	jim.c	/^static int JimParseListStr(struct JimParserCtx *pc)$/;"	f	file:
JimParseMissing	jim.c	/^struct JimParseMissing {$/;"	s	file:
JimParseQuote	jim.c	/^static int JimParseQuote(struct JimParserCtx *pc)$/;"	f	file:
JimParseScript	jim.c	/^static int JimParseScript(struct JimParserCtx *pc)$/;"	f	file:
JimParseSep	jim.c	/^static int JimParseSep(struct JimParserCtx *pc)$/;"	f	file:
JimParseStr	jim.c	/^static int JimParseStr(struct JimParserCtx *pc)$/;"	f	file:
JimParseSubBrace	jim.c	/^static void JimParseSubBrace(struct JimParserCtx *pc)$/;"	f	file:
JimParseSubCmd	jim.c	/^static void JimParseSubCmd(struct JimParserCtx *pc)$/;"	f	file:
JimParseSubQuote	jim.c	/^static int JimParseSubQuote(struct JimParserCtx *pc)$/;"	f	file:
JimParseSubst	jim.c	/^static void JimParseSubst(struct JimParserCtx *pc, int flags)$/;"	f	file:
JimParseVar	jim.c	/^static int JimParseVar(struct JimParserCtx *pc)$/;"	f	file:
JimParserCtx	jim.c	/^struct JimParserCtx$/;"	s	file:
JimParserGetTokenObj	jim.c	/^static Jim_Obj *JimParserGetTokenObj(Jim_Interp *interp, struct JimParserCtx *pc)$/;"	f	file:
JimParserInit	jim.c	/^static void JimParserInit(struct JimParserCtx *pc, const char *prg, int len, int linenr)$/;"	f	file:
JimPowWide	jim.c	/^static jim_wide JimPowWide(jim_wide b, jim_wide e)$/;"	f	file:
JimPrngInit	jim.c	/^static void JimPrngInit(Jim_Interp *interp)$/;"	f	file:
JimPrngSeed	jim.c	/^static void JimPrngSeed(Jim_Interp *interp, unsigned char *seed, int seedLen)$/;"	f	file:
JimQualifyName	jim.c	/^    #define JimQualifyName(/;"	d	file:
JimQualifyName	jim.c	/^static const char *JimQualifyName(Jim_Interp *interp, const char *name, Jim_Obj **objPtrPtr)$/;"	f	file:
JimQualifyNameObj	jim.c	/^static Jim_Obj *JimQualifyNameObj(Jim_Interp *interp, Jim_Obj *nsObj)$/;"	f	file:
JimRandDouble	jim.c	/^static double JimRandDouble(Jim_Interp *interp)$/;"	f	file:
JimRandomBytes	jim.c	/^static void JimRandomBytes(Jim_Interp *interp, void *dest, unsigned int len)$/;"	f	file:
JimRangeLen	jim.c	/^static int JimRangeLen(jim_wide start, jim_wide end, jim_wide step)$/;"	f	file:
JimRefMarkHashTableType	jim.c	/^static const Jim_HashTableType JimRefMarkHashTableType = {$/;"	v	file:
JimReferencesHTHashFunction	jim.c	/^static unsigned int JimReferencesHTHashFunction(const void *key)$/;"	f	file:
JimReferencesHTKeyCompare	jim.c	/^static int JimReferencesHTKeyCompare(void *privdata, const void *key1, const void *key2)$/;"	f	file:
JimReferencesHTKeyDestructor	jim.c	/^static void JimReferencesHTKeyDestructor(void *privdata, void *key)$/;"	f	file:
JimReferencesHTKeyDup	jim.c	/^static void *JimReferencesHTKeyDup(void *privdata, const void *key)$/;"	f	file:
JimReferencesHTValDestructor	jim.c	/^static void JimReferencesHTValDestructor(void *interp, void *val)$/;"	f	file:
JimReferencesHashTableType	jim.c	/^static const Jim_HashTableType JimReferencesHashTableType = {$/;"	v	file:
JimRelToAbsIndex	jim.c	/^static int JimRelToAbsIndex(int len, int idx)$/;"	f	file:
JimRelToAbsRange	jim.c	/^static void JimRelToAbsRange(int len, int *firstPtr, int *lastPtr, int *rangeLenPtr)$/;"	f	file:
JimResetHashTable	jim.c	/^static void JimResetHashTable(Jim_HashTable *ht)$/;"	f	file:
JimResetStackTrace	jim.c	/^static void JimResetStackTrace(Jim_Interp *interp)$/;"	f	file:
JimScanAString	jim.c	/^static Jim_Obj *JimScanAString(Jim_Interp *interp, const char *sdescr, const char *str)$/;"	f	file:
JimScriptValid	jim.c	/^static int JimScriptValid(Jim_Interp *interp, ScriptObj *script)$/;"	f	file:
JimSearchList	jim.c	/^static int JimSearchList(Jim_Interp *interp, Jim_Obj *listObjPtr, Jim_Obj *valObj)$/;"	f	file:
JimSetFailedEnumResult	jim.c	/^static void JimSetFailedEnumResult(Jim_Interp *interp, const char *arg, const char *badtype,$/;"	f	file:
JimSetProcArg	jim.c	/^static int JimSetProcArg(Jim_Interp *interp, Jim_Obj *argNameObj, Jim_Obj *argValObj)$/;"	f	file:
JimSetProcWrongArgs	jim.c	/^static void JimSetProcWrongArgs(Jim_Interp *interp, Jim_Obj *procNameObj, Jim_Cmd *cmd)$/;"	f	file:
JimSetScriptFromAny	jim.c	/^static void JimSetScriptFromAny(Jim_Interp *interp, struct Jim_Obj *objPtr)$/;"	f	file:
JimSetSourceInfo	jim.c	/^static void JimSetSourceInfo(Jim_Interp *interp, Jim_Obj *objPtr,$/;"	f	file:
JimSetStackTrace	jim.c	/^static void JimSetStackTrace(Jim_Interp *interp, Jim_Obj *stackTraceObj)$/;"	f	file:
JimSetStringBytes	jim.c	/^static void JimSetStringBytes(Jim_Obj *objPtr, const char *str)$/;"	f	file:
JimSign	jim.c	/^static int JimSign(jim_wide w)$/;"	f	file:
JimSortStringTable	jim.c	/^static char **JimSortStringTable(const char *const *tablePtr)$/;"	f	file:
JimStrCopyUpperLower	jim.c	/^static void JimStrCopyUpperLower(char *dest, const char *str, int uc)$/;"	f	file:
JimStringCompare	jim.c	/^static int JimStringCompare(const char *s1, int l1, const char *s2, int l2)$/;"	f	file:
JimStringCompareLen	jim.c	/^static int JimStringCompareLen(const char *s1, const char *s2, int maxchars, int nocase)$/;"	f	file:
JimStringCopyHTDup	jim.c	/^static void *JimStringCopyHTDup(void *privdata, const void *key)$/;"	f	file:
JimStringCopyHTHashFunction	jim.c	/^static unsigned int JimStringCopyHTHashFunction(const void *key)$/;"	f	file:
JimStringCopyHTKeyCompare	jim.c	/^static int JimStringCopyHTKeyCompare(void *privdata, const void *key1, const void *key2)$/;"	f	file:
JimStringCopyHTKeyDestructor	jim.c	/^static void JimStringCopyHTKeyDestructor(void *privdata, void *key)$/;"	f	file:
JimStringFirst	jim.c	/^static int JimStringFirst(const char *s1, int l1, const char *s2, int l2, int idx)$/;"	f	file:
JimStringGetRange	jim.c	/^static int JimStringGetRange(Jim_Interp *interp, Jim_Obj *firstObjPtr, Jim_Obj *lastObjPtr,$/;"	f	file:
JimStringIs	jim.c	/^static int JimStringIs(Jim_Interp *interp, Jim_Obj *strObjPtr, Jim_Obj *strClass, int strict)$/;"	f	file:
JimStringLast	jim.c	/^static int JimStringLast(const char *s1, int l1, const char *s2, int l2)$/;"	f	file:
JimStringLastUtf8	jim.c	/^static int JimStringLastUtf8(const char *s1, int l1, const char *s2, int l2)$/;"	f	file:
JimStringMap	jim.c	/^static Jim_Obj *JimStringMap(Jim_Interp *interp, Jim_Obj *mapListObjPtr,$/;"	f	file:
JimStringReplaceObj	jim.c	/^Jim_Obj *JimStringReplaceObj(Jim_Interp *interp,$/;"	f
JimStringToLower	jim.c	/^static Jim_Obj *JimStringToLower(Jim_Interp *interp, Jim_Obj *strObjPtr)$/;"	f	file:
JimStringToTitle	jim.c	/^static Jim_Obj *JimStringToTitle(Jim_Interp *interp, Jim_Obj *strObjPtr)$/;"	f	file:
JimStringToUpper	jim.c	/^static Jim_Obj *JimStringToUpper(Jim_Interp *interp, Jim_Obj *strObjPtr)$/;"	f	file:
JimStringTrim	jim.c	/^static Jim_Obj *JimStringTrim(Jim_Interp *interp, Jim_Obj *strObjPtr, Jim_Obj *trimcharsObjPtr)$/;"	f	file:
JimStringTrimLeft	jim.c	/^static Jim_Obj *JimStringTrimLeft(Jim_Interp *interp, Jim_Obj *strObjPtr, Jim_Obj *trimcharsObjPtr)$/;"	f	file:
JimStringTrimRight	jim.c	/^static Jim_Obj *JimStringTrimRight(Jim_Interp *interp, Jim_Obj *strObjPtr, Jim_Obj *trimcharsObjPtr)$/;"	f	file:
JimSubDivHelper	jim.c	/^static int JimSubDivHelper(Jim_Interp *interp, int argc, Jim_Obj *const *argv, int op)$/;"	f	file:
JimSubstOneToken	jim.c	/^static int JimSubstOneToken(Jim_Interp *interp, const ScriptToken *token, Jim_Obj **objPtrPtr)$/;"	f	file:
JimTrivialMatch	jim.c	/^#define JimTrivialMatch(/;"	d	file:
JimUnknown	jim.c	/^static int JimUnknown(Jim_Interp *interp, int argc, Jim_Obj *const *argv)$/;"	f	file:
JimUpdateProcNamespace	jim.c	/^static void JimUpdateProcNamespace(Jim_Interp *interp, Jim_Cmd *cmdPtr, const char *cmdname)$/;"	f	file:
JimValidName	jim.c	/^static int JimValidName(Jim_Interp *interp, const char *type, Jim_Obj *nameObjPtr)$/;"	f	file:
JimVariablesHTValDestructor	jim.c	/^static void JimVariablesHTValDestructor(void *interp, void *val)$/;"	f	file:
JimVariablesHashTableType	jim.c	/^static const Jim_HashTableType JimVariablesHashTableType = {$/;"	v	file:
JimVariablesList	jim.c	/^static Jim_Obj *JimVariablesList(Jim_Interp *interp, Jim_Obj *patternObjPtr, int mode)$/;"	f	file:
JimVariablesMatch	jim.c	/^static void JimVariablesMatch(Jim_Interp *interp, Jim_Obj *listObjPtr,$/;"	f	file:
JimWideValue	jim.c	/^#define JimWideValue(/;"	d	file:
Jim_AddCoreCommand	jim.c	/^static int Jim_AddCoreCommand(Jim_Interp *interp, int argc, Jim_Obj *const *argv)$/;"	f	file:
Jim_AddHashEntry	jim.c	/^int Jim_AddHashEntry(Jim_HashTable *ht, const void *key, void *val)$/;"	f
Jim_AioFilehandle	jim.c	/^FILE *Jim_AioFilehandle(Jim_Interp *interp, Jim_Obj *fhObj)$/;"	f
Jim_AliasCoreCommand	jim.c	/^static int Jim_AliasCoreCommand(Jim_Interp *interp, int argc, Jim_Obj *const *argv)$/;"	f	file:
Jim_Alloc	jim.c	/^void *Jim_Alloc(int size)$/;"	f
Jim_AppendCoreCommand	jim.c	/^static int Jim_AppendCoreCommand(Jim_Interp *interp, int argc, Jim_Obj *const *argv)$/;"	f	file:
Jim_AppendObj	jim.c	/^void Jim_AppendObj(Jim_Interp *interp, Jim_Obj *objPtr, Jim_Obj *appendObjPtr)$/;"	f
Jim_AppendString	jim.c	/^void Jim_AppendString(Jim_Interp *interp, Jim_Obj *objPtr, const char *str, int len)$/;"	f
Jim_AppendStrings	jim.c	/^void Jim_AppendStrings(Jim_Interp *interp, Jim_Obj *objPtr, ...)$/;"	f
Jim_ApplyCoreCommand	jim.c	/^static int Jim_ApplyCoreCommand(Jim_Interp *interp, int argc, Jim_Obj *const *argv)$/;"	f	file:
Jim_BreakCoreCommand	jim.c	/^static int Jim_BreakCoreCommand(Jim_Interp *interp, int argc, Jim_Obj *const *argv)$/;"	f	file:
Jim_CallFrame	jim.h	/^typedef struct Jim_CallFrame {$/;"	s
Jim_CallFrame	jim.h	/^} Jim_CallFrame;$/;"	t	typeref:struct:Jim_CallFrame
Jim_CatchCoreCommand	jim.c	/^static int Jim_CatchCoreCommand(Jim_Interp *interp, int argc, Jim_Obj *const *argv)$/;"	f	file:
Jim_CheckShowCommands	jim.c	/^int Jim_CheckShowCommands(Jim_Interp *interp, Jim_Obj *objPtr, const char *const *tablePtr)$/;"	f
Jim_CheckSignal	jim.h	/^#define Jim_CheckSignal(/;"	d
Jim_Cmd	jim.h	/^typedef struct Jim_Cmd {$/;"	s
Jim_Cmd	jim.h	/^} Jim_Cmd;$/;"	t	typeref:struct:Jim_Cmd
Jim_CmdPrivData	jim.h	/^#define Jim_CmdPrivData(/;"	d
Jim_CmdProc	jim.h	/^typedef int Jim_CmdProc(struct Jim_Interp *interp, int argc,$/;"	t
Jim_Collect	jim.c	/^int Jim_Collect(Jim_Interp *interp)$/;"	f
Jim_CollectCoreCommand	jim.c	/^static int Jim_CollectCoreCommand(Jim_Interp *interp, int argc, Jim_Obj *const *argv)$/;"	f	file:
Jim_CollectIfNeeded	jim.c	/^void Jim_CollectIfNeeded(Jim_Interp *interp)$/;"	f
Jim_CommandMatchObj	jim.c	/^int Jim_CommandMatchObj(Jim_Interp *interp, Jim_Obj *commandObj, Jim_Obj *patternObj,$/;"	f
Jim_CompareHashKeys	jim.h	/^#define Jim_CompareHashKeys(/;"	d
Jim_CompareStringImmediate	jim.c	/^int Jim_CompareStringImmediate(Jim_Interp *interp, Jim_Obj *objPtr, const char *str)$/;"	f
Jim_ConcatCoreCommand	jim.c	/^static int Jim_ConcatCoreCommand(Jim_Interp *interp, int argc, Jim_Obj *const *argv)$/;"	f	file:
Jim_ConcatObj	jim.c	/^Jim_Obj *Jim_ConcatObj(Jim_Interp *interp, int objc, Jim_Obj *const *objv)$/;"	f
Jim_ContinueCoreCommand	jim.c	/^static int Jim_ContinueCoreCommand(Jim_Interp *interp, int argc, Jim_Obj *const *argv)$/;"	f	file:
Jim_CoreCommandsTable	jim.c	/^} Jim_CoreCommandsTable[] = {$/;"	v	typeref:struct:__anon8	file:
Jim_CreateCommand	jim.c	/^int Jim_CreateCommand(Jim_Interp *interp, const char *cmdNameStr,$/;"	f
Jim_CreateInterp	jim.c	/^Jim_Interp *Jim_CreateInterp(void)$/;"	f
Jim_DebugCoreCommand	jim.c	/^static int Jim_DebugCoreCommand(Jim_Interp *interp, int argc, Jim_Obj *const *argv)$/;"	f	file:
Jim_DecrRefCount	jim.h	/^#define Jim_DecrRefCount(/;"	d
Jim_DelCmdProc	jim.h	/^typedef void Jim_DelCmdProc(struct Jim_Interp *interp, void *privData);$/;"	t
Jim_DeleteAssocData	jim.c	/^int Jim_DeleteAssocData(Jim_Interp *interp, const char *key)$/;"	f
Jim_DeleteCommand	jim.c	/^int Jim_DeleteCommand(Jim_Interp *interp, const char *name)$/;"	f
Jim_DeleteHashEntry	jim.c	/^int Jim_DeleteHashEntry(Jim_HashTable *ht, const void *key)$/;"	f
Jim_DictAddElement	jim.c	/^int Jim_DictAddElement(Jim_Interp *interp, Jim_Obj *objPtr,$/;"	f
Jim_DictCoreCommand	jim.c	/^static int Jim_DictCoreCommand(Jim_Interp *interp, int argc, Jim_Obj *const *argv)$/;"	f	file:
Jim_DictInfo	jim.c	/^int Jim_DictInfo(Jim_Interp *interp, Jim_Obj *objPtr)$/;"	f
Jim_DictKey	jim.c	/^int Jim_DictKey(Jim_Interp *interp, Jim_Obj *dictPtr, Jim_Obj *keyPtr,$/;"	f
Jim_DictKeys	jim.c	/^int Jim_DictKeys(Jim_Interp *interp, Jim_Obj *objPtr, Jim_Obj *patternObjPtr)$/;"	f
Jim_DictKeysVector	jim.c	/^int Jim_DictKeysVector(Jim_Interp *interp, Jim_Obj *dictPtr,$/;"	f
Jim_DictMerge	jim.c	/^Jim_Obj *Jim_DictMerge(Jim_Interp *interp, int objc, Jim_Obj *const *objv)$/;"	f
Jim_DictPairs	jim.c	/^int Jim_DictPairs(Jim_Interp *interp, Jim_Obj *dictPtr, Jim_Obj ***objPtrPtr, int *len)$/;"	f
Jim_DictSize	jim.c	/^int Jim_DictSize(Jim_Interp *interp, Jim_Obj *objPtr)$/;"	f
Jim_DictValues	jim.c	/^int Jim_DictValues(Jim_Interp *interp, Jim_Obj *objPtr, Jim_Obj *patternObjPtr)$/;"	f
Jim_DivCoreCommand	jim.c	/^static int Jim_DivCoreCommand(Jim_Interp *interp, int argc, Jim_Obj *const *argv)$/;"	f	file:
Jim_DupInternalRepProc	jim.h	/^typedef void (Jim_DupInternalRepProc)(struct Jim_Interp *interp,$/;"	t
Jim_DuplicateObj	jim.c	/^Jim_Obj *Jim_DuplicateObj(Jim_Interp *interp, Jim_Obj *objPtr)$/;"	f
Jim_EnvCoreCommand	jim.c	/^static int Jim_EnvCoreCommand(Jim_Interp *interp, int argc, Jim_Obj *const *argv)$/;"	f	file:
Jim_ErrorCoreCommand	jim.c	/^static int Jim_ErrorCoreCommand(Jim_Interp *interp, int argc, Jim_Obj *const *argv)$/;"	f	file:
Jim_Eval	jim.c	/^int Jim_Eval(Jim_Interp *interp, const char *script)$/;"	f
Jim_EvalCoreCommand	jim.c	/^static int Jim_EvalCoreCommand(Jim_Interp *interp, int argc, Jim_Obj *const *argv)$/;"	f	file:
Jim_EvalEnsemble	jim.c	/^static int Jim_EvalEnsemble(Jim_Interp *interp, const char *basecmd, const char *subcmd, int argc, Jim_Obj *const *argv)$/;"	f	file:
Jim_EvalExpression	jim.c	/^int Jim_EvalExpression(Jim_Interp *interp, Jim_Obj *exprObjPtr, Jim_Obj **exprResultPtrPtr)$/;"	f
Jim_EvalFile	jim.c	/^int Jim_EvalFile(Jim_Interp *interp, const char *filename)$/;"	f
Jim_EvalFileGlobal	jim.c	/^int Jim_EvalFileGlobal(Jim_Interp *interp, const char *filename)$/;"	f
Jim_EvalGlobal	jim.c	/^int Jim_EvalGlobal(Jim_Interp *interp, const char *script)$/;"	f
Jim_EvalNamespace	jim.c	/^int Jim_EvalNamespace(Jim_Interp *interp, Jim_Obj *scriptObj, Jim_Obj *nsObj)$/;"	f
Jim_EvalObj	jim.c	/^int Jim_EvalObj(Jim_Interp *interp, Jim_Obj *scriptObjPtr)$/;"	f
Jim_EvalObjList	jim.c	/^int Jim_EvalObjList(Jim_Interp *interp, Jim_Obj *listPtr)$/;"	f
Jim_EvalObjPrefix	jim.c	/^int Jim_EvalObjPrefix(Jim_Interp *interp, Jim_Obj *prefix, int objc, Jim_Obj *const *objv)$/;"	f
Jim_EvalObjVector	jim.c	/^int Jim_EvalObjVector(Jim_Interp *interp, int objc, Jim_Obj *const *objv)$/;"	f
Jim_EvalPrefix	jim.h	/^#define Jim_EvalPrefix(/;"	d
Jim_EvalSource	jim.c	/^int Jim_EvalSource(Jim_Interp *interp, const char *filename, int lineno, const char *script)$/;"	f
Jim_Eval_Named	jim.h	/^#define Jim_Eval_Named(/;"	d
Jim_ExistsCoreCommand	jim.c	/^static int Jim_ExistsCoreCommand(Jim_Interp *interp, int argc, Jim_Obj *const *argv)$/;"	f	file:
Jim_ExitCoreCommand	jim.c	/^static int Jim_ExitCoreCommand(Jim_Interp *interp, int argc, Jim_Obj *const *argv)$/;"	f	file:
Jim_ExpandHashTable	jim.c	/^void Jim_ExpandHashTable(Jim_HashTable *ht, unsigned int size)$/;"	f
Jim_ExprCoreCommand	jim.c	/^static int Jim_ExprCoreCommand(Jim_Interp *interp, int argc, Jim_Obj *const *argv)$/;"	f	file:
Jim_ExprOperator	jim.c	/^typedef struct Jim_ExprOperator$/;"	s	file:
Jim_ExprOperator	jim.c	/^} Jim_ExprOperator;$/;"	t	typeref:struct:Jim_ExprOperator	file:
Jim_ExprOperators	jim.c	/^static const struct Jim_ExprOperator Jim_ExprOperators[] = {$/;"	v	typeref:struct:Jim_ExprOperator	file:
Jim_FinalizeCoreCommand	jim.c	/^static int Jim_FinalizeCoreCommand(Jim_Interp *interp, int argc, Jim_Obj *const *argv)$/;"	f	file:
Jim_FindByName	jim.c	/^int Jim_FindByName(const char *name, const char * const array[], size_t len)$/;"	f
Jim_FindHashEntry	jim.c	/^Jim_HashEntry *Jim_FindHashEntry(Jim_HashTable *ht, const void *key)$/;"	f
Jim_ForCoreCommand	jim.c	/^static int Jim_ForCoreCommand(Jim_Interp *interp, int argc, Jim_Obj *const *argv)$/;"	f	file:
Jim_ForeachCoreCommand	jim.c	/^static int Jim_ForeachCoreCommand(Jim_Interp *interp, int argc, Jim_Obj *const *argv)$/;"	f	file:
Jim_FormatCoreCommand	jim.c	/^static int Jim_FormatCoreCommand(Jim_Interp *interp, int argc, Jim_Obj *const *argv)$/;"	f	file:
Jim_FormatString	jim-format.c	/^Jim_Obj *Jim_FormatString(Jim_Interp *interp, Jim_Obj *fmtObjPtr, int objc, Jim_Obj *const *objv)$/;"	f
Jim_Free	jim.c	/^void Jim_Free(void *ptr)$/;"	f
Jim_FreeEntryKey	jim.h	/^#define Jim_FreeEntryKey(/;"	d
Jim_FreeEntryVal	jim.h	/^#define Jim_FreeEntryVal(/;"	d
Jim_FreeHashTable	jim.c	/^int Jim_FreeHashTable(Jim_HashTable *ht)$/;"	f
Jim_FreeHashTableIterator	jim.h	/^#define Jim_FreeHashTableIterator(/;"	d
Jim_FreeIntRep	jim.h	/^#define Jim_FreeIntRep(/;"	d
Jim_FreeInternalRepProc	jim.h	/^typedef void (Jim_FreeInternalRepProc)(struct Jim_Interp *interp,$/;"	t
Jim_FreeInterp	jim.c	/^void Jim_FreeInterp(Jim_Interp *i)$/;"	f
Jim_FreeNewObj	jim.h	/^#define Jim_FreeNewObj /;"	d
Jim_FreeObj	jim.c	/^void Jim_FreeObj(Jim_Interp *interp, Jim_Obj *objPtr)$/;"	f
Jim_FreeStack	jim.c	/^void Jim_FreeStack(Jim_Stack *stack)$/;"	f
Jim_FreeStackElements	jim.c	/^void Jim_FreeStackElements(Jim_Stack *stack, void (*freeFunc) (void *ptr))$/;"	f
Jim_GenHashFunction	jim.c	/^unsigned int Jim_GenHashFunction(const unsigned char *buf, int len)$/;"	f
Jim_GetAssocData	jim.c	/^void *Jim_GetAssocData(Jim_Interp *interp, const char *key)$/;"	f
Jim_GetBoolFromExpr	jim.c	/^int Jim_GetBoolFromExpr(Jim_Interp *interp, Jim_Obj *exprObjPtr, int *boolPtr)$/;"	f
Jim_GetBoolean	jim.c	/^int Jim_GetBoolean(Jim_Interp *interp, Jim_Obj *objPtr, int * booleanPtr)$/;"	f
Jim_GetCallFrameByLevel	jim.c	/^Jim_CallFrame *Jim_GetCallFrameByLevel(Jim_Interp *interp, Jim_Obj *levelObjPtr)$/;"	f
Jim_GetCommand	jim.c	/^Jim_Cmd *Jim_GetCommand(Jim_Interp *interp, Jim_Obj *objPtr, int flags)$/;"	f
Jim_GetDouble	jim.c	/^int Jim_GetDouble(Jim_Interp *interp, Jim_Obj *objPtr, double *doublePtr)$/;"	f
Jim_GetEnum	jim.c	/^int Jim_GetEnum(Jim_Interp *interp, Jim_Obj *objPtr,$/;"	f
Jim_GetEnviron	jim.c	/^char **Jim_GetEnviron(void)$/;"	f
Jim_GetExitCode	jim.c	/^int Jim_GetExitCode(Jim_Interp *interp)$/;"	f
Jim_GetFinalizer	jim.c	/^int Jim_GetFinalizer(Jim_Interp *interp, Jim_Obj *objPtr, Jim_Obj **cmdNamePtrPtr)$/;"	f
Jim_GetGlobalVariable	jim.c	/^Jim_Obj *Jim_GetGlobalVariable(Jim_Interp *interp, Jim_Obj *nameObjPtr, int flags)$/;"	f
Jim_GetGlobalVariableStr	jim.c	/^Jim_Obj *Jim_GetGlobalVariableStr(Jim_Interp *interp, const char *name, int flags)$/;"	f
Jim_GetHashEntryKey	jim.h	/^#define Jim_GetHashEntryKey(/;"	d
Jim_GetHashEntryVal	jim.h	/^#define Jim_GetHashEntryVal(/;"	d
Jim_GetHashTableCollisions	jim.h	/^#define Jim_GetHashTableCollisions(/;"	d
Jim_GetHashTableIterator	jim.c	/^Jim_HashTableIterator *Jim_GetHashTableIterator(Jim_HashTable *ht)$/;"	f
Jim_GetHashTableSize	jim.h	/^#define Jim_GetHashTableSize(/;"	d
Jim_GetHashTableUsed	jim.h	/^#define Jim_GetHashTableUsed(/;"	d
Jim_GetId	jim.h	/^#define Jim_GetId(/;"	d
Jim_GetIndex	jim.c	/^int Jim_GetIndex(Jim_Interp *interp, Jim_Obj *objPtr, int *indexPtr)$/;"	f
Jim_GetIntRepPtr	jim.h	/^#define Jim_GetIntRepPtr(/;"	d
Jim_GetLong	jim.c	/^int Jim_GetLong(Jim_Interp *interp, Jim_Obj *objPtr, long *longPtr)$/;"	f
Jim_GetReference	jim.c	/^Jim_Reference *Jim_GetReference(Jim_Interp *interp, Jim_Obj *objPtr)$/;"	f
Jim_GetResult	jim.h	/^#define Jim_GetResult(/;"	d
Jim_GetReturnCode	jim.c	/^int Jim_GetReturnCode(Jim_Interp *interp, Jim_Obj *objPtr, int *intPtr)$/;"	f
Jim_GetString	jim.c	/^const char *Jim_GetString(Jim_Obj *objPtr, int *lenPtr)$/;"	f
Jim_GetSubst	jim.c	/^static ScriptObj *Jim_GetSubst(Jim_Interp *interp, Jim_Obj *objPtr, int flags)$/;"	f	file:
Jim_GetVariable	jim.c	/^Jim_Obj *Jim_GetVariable(Jim_Interp *interp, Jim_Obj *nameObjPtr, int flags)$/;"	f
Jim_GetVariableStr	jim.c	/^Jim_Obj *Jim_GetVariableStr(Jim_Interp *interp, const char *name, int flags)$/;"	f
Jim_GetWide	jim.c	/^int Jim_GetWide(Jim_Interp *interp, Jim_Obj *objPtr, jim_wide * widePtr)$/;"	f
Jim_GetrefCoreCommand	jim.c	/^static int Jim_GetrefCoreCommand(Jim_Interp *interp, int argc, Jim_Obj *const *argv)$/;"	f	file:
Jim_GlobalCoreCommand	jim.c	/^static int Jim_GlobalCoreCommand(Jim_Interp *interp, int argc, Jim_Obj *const *argv)$/;"	f	file:
Jim_HashEntry	jim.h	/^typedef struct Jim_HashEntry {$/;"	s
Jim_HashEntry	jim.h	/^} Jim_HashEntry;$/;"	t	typeref:struct:Jim_HashEntry
Jim_HashKey	jim.h	/^#define Jim_HashKey(/;"	d
Jim_HashTable	jim.h	/^typedef struct Jim_HashTable {$/;"	s
Jim_HashTable	jim.h	/^} Jim_HashTable;$/;"	t	typeref:struct:Jim_HashTable
Jim_HashTableIterator	jim.h	/^typedef struct Jim_HashTableIterator {$/;"	s
Jim_HashTableIterator	jim.h	/^} Jim_HashTableIterator;$/;"	t	typeref:struct:Jim_HashTableIterator
Jim_HashTableType	jim.h	/^typedef struct Jim_HashTableType {$/;"	s
Jim_HashTableType	jim.h	/^} Jim_HashTableType;$/;"	t	typeref:struct:Jim_HashTableType
Jim_IfCoreCommand	jim.c	/^static int Jim_IfCoreCommand(Jim_Interp *interp, int argc, Jim_Obj *const *argv)$/;"	f	file:
Jim_IncrCoreCommand	jim.c	/^static int Jim_IncrCoreCommand(Jim_Interp *interp, int argc, Jim_Obj *const *argv)$/;"	f	file:
Jim_IncrRefCount	jim.h	/^#define Jim_IncrRefCount(/;"	d
Jim_InfoCoreCommand	jim.c	/^static int Jim_InfoCoreCommand(Jim_Interp *interp, int argc, Jim_Obj *const *argv)$/;"	f	file:
Jim_InitHashTable	jim.c	/^int Jim_InitHashTable(Jim_HashTable *ht, const Jim_HashTableType *type, void *privDataPtr)$/;"	f
Jim_InitStack	jim.c	/^void Jim_InitStack(Jim_Stack *stack)$/;"	f
Jim_IntHashFunction	jim.c	/^unsigned int Jim_IntHashFunction(unsigned int key)$/;"	f
Jim_Interp	jim.h	/^typedef struct Jim_Interp {$/;"	s
Jim_Interp	jim.h	/^} Jim_Interp;$/;"	t	typeref:struct:Jim_Interp
Jim_InterpDeleteProc	jim.h	/^typedef void (Jim_InterpDeleteProc)(Jim_Interp *interp, void *data);$/;"	t
Jim_InterpIncrProcEpoch	jim.h	/^#define Jim_InterpIncrProcEpoch(/;"	d
Jim_InvalidateStringRep	jim.c	/^void Jim_InvalidateStringRep(Jim_Obj *objPtr)$/;"	f
Jim_IsBigEndian	jim.c	/^int Jim_IsBigEndian(void)$/;"	f
Jim_IsDict	jim.c	/^int Jim_IsDict(Jim_Obj *objPtr)$/;"	f
Jim_IsList	jim.c	/^int Jim_IsList(Jim_Obj *objPtr)$/;"	f
Jim_IsShared	jim.h	/^#define Jim_IsShared(/;"	d
Jim_JoinCoreCommand	jim.c	/^static int Jim_JoinCoreCommand(Jim_Interp *interp, int argc, Jim_Obj *const *argv)$/;"	f	file:
Jim_LappendCoreCommand	jim.c	/^static int Jim_LappendCoreCommand(Jim_Interp *interp, int argc, Jim_Obj *const *argv)$/;"	f	file:
Jim_LassignCoreCommand	jim.c	/^static int Jim_LassignCoreCommand(Jim_Interp *interp, int argc, Jim_Obj *const *argv)$/;"	f	file:
Jim_Length	jim.c	/^int Jim_Length(Jim_Obj *objPtr)$/;"	f
Jim_LindexCoreCommand	jim.c	/^static int Jim_LindexCoreCommand(Jim_Interp *interp, int argc, Jim_Obj *const *argv)$/;"	f	file:
Jim_LinsertCoreCommand	jim.c	/^static int Jim_LinsertCoreCommand(Jim_Interp *interp, int argc, Jim_Obj *const *argv)$/;"	f	file:
Jim_ListAppendElement	jim.c	/^void Jim_ListAppendElement(Jim_Interp *interp, Jim_Obj *listPtr, Jim_Obj *objPtr)$/;"	f
Jim_ListAppendList	jim.c	/^void Jim_ListAppendList(Jim_Interp *interp, Jim_Obj *listPtr, Jim_Obj *appendListPtr)$/;"	f
Jim_ListCoreCommand	jim.c	/^static int Jim_ListCoreCommand(Jim_Interp *interp, int argc, Jim_Obj *const *argv)$/;"	f	file:
Jim_ListGetIndex	jim.c	/^Jim_Obj *Jim_ListGetIndex(Jim_Interp *interp, Jim_Obj *listPtr, int idx)$/;"	f
Jim_ListIndex	jim.c	/^int Jim_ListIndex(Jim_Interp *interp, Jim_Obj *listPtr, int idx, Jim_Obj **objPtrPtr, int flags)$/;"	f
Jim_ListInsertElements	jim.c	/^void Jim_ListInsertElements(Jim_Interp *interp, Jim_Obj *listPtr, int idx,$/;"	f
Jim_ListIter	jim.c	/^} Jim_ListIter;$/;"	t	typeref:struct:__anon6	file:
Jim_ListJoin	jim.c	/^Jim_Obj *Jim_ListJoin(Jim_Interp *interp, Jim_Obj *listObjPtr, const char *joinStr, int joinStrLen)$/;"	f
Jim_ListLength	jim.c	/^int Jim_ListLength(Jim_Interp *interp, Jim_Obj *objPtr)$/;"	f
Jim_ListRange	jim.c	/^Jim_Obj *Jim_ListRange(Jim_Interp *interp, Jim_Obj *listObjPtr, Jim_Obj *firstObjPtr,$/;"	f
Jim_ListSetIndex	jim.c	/^int Jim_ListSetIndex(Jim_Interp *interp, Jim_Obj *varNamePtr,$/;"	f
Jim_LlengthCoreCommand	jim.c	/^static int Jim_LlengthCoreCommand(Jim_Interp *interp, int argc, Jim_Obj *const *argv)$/;"	f	file:
Jim_LmapCoreCommand	jim.c	/^static int Jim_LmapCoreCommand(Jim_Interp *interp, int argc, Jim_Obj *const *argv)$/;"	f	file:
Jim_LocalCoreCommand	jim.c	/^static int Jim_LocalCoreCommand(Jim_Interp *interp, int argc, Jim_Obj *const *argv)$/;"	f	file:
Jim_LoopCoreCommand	jim.c	/^static int Jim_LoopCoreCommand(Jim_Interp *interp, int argc, Jim_Obj *const *argv)$/;"	f	file:
Jim_LrangeCoreCommand	jim.c	/^static int Jim_LrangeCoreCommand(Jim_Interp *interp, int argc, Jim_Obj *const *argv)$/;"	f	file:
Jim_LrepeatCoreCommand	jim.c	/^static int Jim_LrepeatCoreCommand(Jim_Interp *interp, int argc, Jim_Obj *const *argv)$/;"	f	file:
Jim_LreplaceCoreCommand	jim.c	/^static int Jim_LreplaceCoreCommand(Jim_Interp *interp, int argc, Jim_Obj *const *argv)$/;"	f	file:
Jim_LreverseCoreCommand	jim.c	/^static int Jim_LreverseCoreCommand(Jim_Interp *interp, int argc, Jim_Obj *const *argv)$/;"	f	file:
Jim_LsearchCoreCommand	jim.c	/^static int Jim_LsearchCoreCommand(Jim_Interp *interp, int argc, Jim_Obj *const *argv)$/;"	f	file:
Jim_LsetCoreCommand	jim.c	/^static int Jim_LsetCoreCommand(Jim_Interp *interp, int argc, Jim_Obj *const *argv)$/;"	f	file:
Jim_LsortCoreCommand	jim.c	/^static int Jim_LsortCoreCommand(Jim_Interp *interp, int argc, Jim_Obj *const argv[])$/;"	f	file:
Jim_MakeErrorMessage	jim.c	/^void Jim_MakeErrorMessage(Jim_Interp *interp)$/;"	f
Jim_MakeGlobalNamespaceName	jim.c	/^Jim_Obj *Jim_MakeGlobalNamespaceName(Jim_Interp *interp, Jim_Obj *nameObjPtr)$/;"	f
Jim_MulCoreCommand	jim.c	/^static int Jim_MulCoreCommand(Jim_Interp *interp, int argc, Jim_Obj *const *argv)$/;"	f	file:
Jim_NewDictObj	jim.c	/^Jim_Obj *Jim_NewDictObj(Jim_Interp *interp, Jim_Obj *const *elements, int len)$/;"	f
Jim_NewDoubleObj	jim.c	/^Jim_Obj *Jim_NewDoubleObj(Jim_Interp *interp, double doubleValue)$/;"	f
Jim_NewEmptyStringObj	jim.h	/^#define Jim_NewEmptyStringObj(/;"	d
Jim_NewIntObj	jim.c	/^Jim_Obj *Jim_NewIntObj(Jim_Interp *interp, jim_wide wideValue)$/;"	f
Jim_NewListObj	jim.c	/^Jim_Obj *Jim_NewListObj(Jim_Interp *interp, Jim_Obj *const *elements, int len)$/;"	f
Jim_NewObj	jim.c	/^Jim_Obj *Jim_NewObj(Jim_Interp *interp)$/;"	f
Jim_NewReference	jim.c	/^Jim_Obj *Jim_NewReference(Jim_Interp *interp, Jim_Obj *objPtr, Jim_Obj *tagPtr, Jim_Obj *cmdNamePtr)$/;"	f
Jim_NewStringObj	jim.c	/^Jim_Obj *Jim_NewStringObj(Jim_Interp *interp, const char *s, int len)$/;"	f
Jim_NewStringObjNoAlloc	jim.c	/^Jim_Obj *Jim_NewStringObjNoAlloc(Jim_Interp *interp, char *s, int len)$/;"	f
Jim_NewStringObjUtf8	jim.c	/^Jim_Obj *Jim_NewStringObjUtf8(Jim_Interp *interp, const char *s, int charlen)$/;"	f
Jim_NewWideObj	jim.h	/^#define Jim_NewWideObj /;"	d
Jim_NextHashEntry	jim.c	/^Jim_HashEntry *Jim_NextHashEntry(Jim_HashTableIterator *iter)$/;"	f
Jim_Obj	jim.h	/^typedef struct Jim_Obj {$/;"	s
Jim_Obj	jim.h	/^} Jim_Obj;$/;"	t	typeref:struct:Jim_Obj
Jim_ObjType	jim.h	/^typedef struct Jim_ObjType {$/;"	s
Jim_ObjType	jim.h	/^} Jim_ObjType;$/;"	t	typeref:struct:Jim_ObjType
Jim_PackageProvide	jim.c	/^int Jim_PackageProvide(Jim_Interp *interp, const char *name, const char *ver, int flags)$/;"	f
Jim_PrngState	jim.h	/^typedef struct Jim_PrngState {$/;"	s
Jim_PrngState	jim.h	/^} Jim_PrngState;$/;"	t	typeref:struct:Jim_PrngState
Jim_ProcArg	jim.h	/^            struct Jim_ProcArg {$/;"	s	struct:Jim_Cmd::__anon21::__anon23
Jim_ProcCoreCommand	jim.c	/^static int Jim_ProcCoreCommand(Jim_Interp *interp, int argc, Jim_Obj *const *argv)$/;"	f	file:
Jim_PutsCoreCommand	jim.c	/^static int Jim_PutsCoreCommand(Jim_Interp *interp, int argc, Jim_Obj *const *argv)$/;"	f	file:
Jim_RandCoreCommand	jim.c	/^static int Jim_RandCoreCommand(Jim_Interp *interp, int argc, Jim_Obj *const *argv)$/;"	f	file:
Jim_RangeCoreCommand	jim.c	/^static int Jim_RangeCoreCommand(Jim_Interp *interp, int argc, Jim_Obj *const *argv)$/;"	f	file:
Jim_Realloc	jim.c	/^void *Jim_Realloc(void *ptr, int size)$/;"	f
Jim_RefCoreCommand	jim.c	/^static int Jim_RefCoreCommand(Jim_Interp *interp, int argc, Jim_Obj *const *argv)$/;"	f	file:
Jim_Reference	jim.h	/^typedef struct Jim_Reference {$/;"	s
Jim_Reference	jim.h	/^} Jim_Reference;$/;"	t	typeref:struct:Jim_Reference
Jim_RegisterCoreCommands	jim.c	/^void Jim_RegisterCoreCommands(Jim_Interp *interp)$/;"	f
Jim_RenameCommand	jim.c	/^int Jim_RenameCommand(Jim_Interp *interp, const char *oldName, const char *newName)$/;"	f
Jim_RenameCoreCommand	jim.c	/^static int Jim_RenameCoreCommand(Jim_Interp *interp, int argc, Jim_Obj *const *argv)$/;"	f	file:
Jim_ReplaceHashEntry	jim.c	/^int Jim_ReplaceHashEntry(Jim_HashTable *ht, const void *key, void *val)$/;"	f
Jim_ResizeHashTable	jim.c	/^void Jim_ResizeHashTable(Jim_HashTable *ht)$/;"	f
Jim_ReturnCode	jim.c	/^const char *Jim_ReturnCode(int code)$/;"	f
Jim_ReturnCoreCommand	jim.c	/^static int Jim_ReturnCoreCommand(Jim_Interp *interp, int argc, Jim_Obj *const *argv)$/;"	f	file:
Jim_ScanCoreCommand	jim.c	/^static int Jim_ScanCoreCommand(Jim_Interp *interp, int argc, Jim_Obj *const *argv)$/;"	f	file:
Jim_ScanString	jim.c	/^Jim_Obj *Jim_ScanString(Jim_Interp *interp, Jim_Obj *strObjPtr, Jim_Obj *fmtObjPtr, int flags)$/;"	f
Jim_ScriptIsComplete	jim.c	/^int Jim_ScriptIsComplete(Jim_Interp *interp, Jim_Obj *scriptObj, char *stateCharPtr)$/;"	f
Jim_SetAssocData	jim.c	/^int Jim_SetAssocData(Jim_Interp *interp, const char *key, Jim_InterpDeleteProc * delProc,$/;"	f
Jim_SetCoreCommand	jim.c	/^static int Jim_SetCoreCommand(Jim_Interp *interp, int argc, Jim_Obj *const *argv)$/;"	f	file:
Jim_SetDictKeysVector	jim.c	/^int Jim_SetDictKeysVector(Jim_Interp *interp, Jim_Obj *varNamePtr,$/;"	f
Jim_SetEmptyResult	jim.h	/^#define Jim_SetEmptyResult(/;"	d
Jim_SetEnviron	jim.c	/^void Jim_SetEnviron(char **env)$/;"	f
Jim_SetFinalizer	jim.c	/^int Jim_SetFinalizer(Jim_Interp *interp, Jim_Obj *objPtr, Jim_Obj *cmdNamePtr)$/;"	f
Jim_SetGlobalVariableStr	jim.c	/^int Jim_SetGlobalVariableStr(Jim_Interp *interp, const char *name, Jim_Obj *objPtr)$/;"	f
Jim_SetHashKey	jim.h	/^#define Jim_SetHashKey(/;"	d
Jim_SetHashVal	jim.h	/^#define Jim_SetHashVal(/;"	d
Jim_SetIntRepPtr	jim.h	/^#define Jim_SetIntRepPtr(/;"	d
Jim_SetResult	jim.h	/^#define Jim_SetResult(/;"	d
Jim_SetResultBool	jim.h	/^#define Jim_SetResultBool(/;"	d
Jim_SetResultFormatted	jim.c	/^void Jim_SetResultFormatted(Jim_Interp *interp, const char *format, ...)$/;"	f
Jim_SetResultInt	jim.h	/^#define Jim_SetResultInt(/;"	d
Jim_SetResultString	jim.h	/^#define Jim_SetResultString(/;"	d
Jim_SetVariable	jim.c	/^int Jim_SetVariable(Jim_Interp *interp, Jim_Obj *nameObjPtr, Jim_Obj *valObjPtr)$/;"	f
Jim_SetVariableLink	jim.c	/^int Jim_SetVariableLink(Jim_Interp *interp, Jim_Obj *nameObjPtr,$/;"	f
Jim_SetVariableStr	jim.c	/^int Jim_SetVariableStr(Jim_Interp *interp, const char *name, Jim_Obj *objPtr)$/;"	f
Jim_SetVariableStrWithStr	jim.c	/^int Jim_SetVariableStrWithStr(Jim_Interp *interp, const char *name, const char *val)$/;"	f
Jim_SetrefCoreCommand	jim.c	/^static int Jim_SetrefCoreCommand(Jim_Interp *interp, int argc, Jim_Obj *const *argv)$/;"	f	file:
Jim_SourceCoreCommand	jim.c	/^static int Jim_SourceCoreCommand(Jim_Interp *interp, int argc, Jim_Obj *const *argv)$/;"	f	file:
Jim_SplitCoreCommand	jim.c	/^static int Jim_SplitCoreCommand(Jim_Interp *interp, int argc, Jim_Obj *const *argv)$/;"	f	file:
Jim_Stack	jim.h	/^typedef struct Jim_Stack {$/;"	s
Jim_Stack	jim.h	/^} Jim_Stack;$/;"	t	typeref:struct:Jim_Stack
Jim_StackLen	jim.c	/^int Jim_StackLen(Jim_Stack *stack)$/;"	f
Jim_StackPeek	jim.c	/^void *Jim_StackPeek(Jim_Stack *stack)$/;"	f
Jim_StackPop	jim.c	/^void *Jim_StackPop(Jim_Stack *stack)$/;"	f
Jim_StackPush	jim.c	/^void Jim_StackPush(Jim_Stack *stack, void *element)$/;"	f
Jim_StrDup	jim.c	/^char *Jim_StrDup(const char *s)$/;"	f
Jim_StrDupLen	jim.c	/^char *Jim_StrDupLen(const char *s, int l)$/;"	f
Jim_String	jim.c	/^const char *Jim_String(Jim_Obj *objPtr)$/;"	f
Jim_StringByteRangeObj	jim.c	/^Jim_Obj *Jim_StringByteRangeObj(Jim_Interp *interp,$/;"	f
Jim_StringCompareLenObj	jim.c	/^int Jim_StringCompareLenObj(Jim_Interp *interp, Jim_Obj *firstObjPtr, Jim_Obj *secondObjPtr, int nocase)$/;"	f
Jim_StringCompareObj	jim.c	/^int Jim_StringCompareObj(Jim_Interp *interp, Jim_Obj *firstObjPtr, Jim_Obj *secondObjPtr, int nocase)$/;"	f
Jim_StringCoreCommand	jim.c	/^static int Jim_StringCoreCommand(Jim_Interp *interp, int argc, Jim_Obj *const *argv)$/;"	f	file:
Jim_StringEqObj	jim.c	/^int Jim_StringEqObj(Jim_Obj *aObjPtr, Jim_Obj *bObjPtr)$/;"	f
Jim_StringMatchObj	jim.c	/^int Jim_StringMatchObj(Jim_Interp *interp, Jim_Obj *patternObjPtr, Jim_Obj *objPtr, int nocase)$/;"	f
Jim_StringRangeObj	jim.c	/^Jim_Obj *Jim_StringRangeObj(Jim_Interp *interp,$/;"	f
Jim_StringToDouble	jim.c	/^int Jim_StringToDouble(const char *str, double *doublePtr)$/;"	f
Jim_StringToWide	jim.c	/^int Jim_StringToWide(const char *str, jim_wide * widePtr, int base)$/;"	f
Jim_SubCoreCommand	jim.c	/^static int Jim_SubCoreCommand(Jim_Interp *interp, int argc, Jim_Obj *const *argv)$/;"	f	file:
Jim_SubstCoreCommand	jim.c	/^static int Jim_SubstCoreCommand(Jim_Interp *interp, int argc, Jim_Obj *const *argv)$/;"	f	file:
Jim_SubstObj	jim.c	/^int Jim_SubstObj(Jim_Interp *interp, Jim_Obj *substObjPtr, Jim_Obj **resObjPtrPtr, int flags)$/;"	f
Jim_SwitchCoreCommand	jim.c	/^static int Jim_SwitchCoreCommand(Jim_Interp *interp, int argc, Jim_Obj *const *argv)$/;"	f	file:
Jim_TailcallCoreCommand	jim.c	/^static int Jim_TailcallCoreCommand(Jim_Interp *interp, int argc, Jim_Obj *const *argv)$/;"	f	file:
Jim_TimeCoreCommand	jim.c	/^static int Jim_TimeCoreCommand(Jim_Interp *interp, int argc, Jim_Obj *const *argv)$/;"	f	file:
Jim_UnsetCoreCommand	jim.c	/^static int Jim_UnsetCoreCommand(Jim_Interp *interp, int argc, Jim_Obj *const *argv)$/;"	f	file:
Jim_UnsetVariable	jim.c	/^int Jim_UnsetVariable(Jim_Interp *interp, Jim_Obj *nameObjPtr, int flags)$/;"	f
Jim_UpcallCoreCommand	jim.c	/^static int Jim_UpcallCoreCommand(Jim_Interp *interp, int argc, Jim_Obj *const *argv)$/;"	f	file:
Jim_UpdateStringProc	jim.h	/^typedef void (Jim_UpdateStringProc)(struct Jim_Obj *objPtr);$/;"	t
Jim_UplevelCoreCommand	jim.c	/^static int Jim_UplevelCoreCommand(Jim_Interp *interp, int argc, Jim_Obj *const *argv)$/;"	f	file:
Jim_UpvarCoreCommand	jim.c	/^static int Jim_UpvarCoreCommand(Jim_Interp *interp, int argc, Jim_Obj *const *argv)$/;"	f	file:
Jim_Utf8Length	jim.c	/^int Jim_Utf8Length(Jim_Interp *interp, Jim_Obj *objPtr)$/;"	f
Jim_Var	jim.h	/^typedef struct Jim_Var {$/;"	s
Jim_Var	jim.h	/^} Jim_Var;$/;"	t	typeref:struct:Jim_Var
Jim_WhileCoreCommand	jim.c	/^static int Jim_WhileCoreCommand(Jim_Interp *interp, int argc, Jim_Obj *const *argv)$/;"	f	file:
Jim_WrongNumArgs	jim.c	/^void Jim_WrongNumArgs(Jim_Interp *interp, int argc, Jim_Obj *const *argv, const char *msg)$/;"	f
LAZY_LEFT	jim.c	/^    LAZY_LEFT,$/;"	e	enum:__anon5	file:
LAZY_NONE	jim.c	/^    LAZY_NONE,$/;"	e	enum:__anon5	file:
LAZY_OP	jim.c	/^    LAZY_OP,$/;"	e	enum:__anon5	file:
LAZY_RIGHT	jim.c	/^    LAZY_RIGHT,$/;"	e	enum:__anon5	file:
LLONG_MAX	jim-win32compat.h	/^	#define LLONG_MAX /;"	d
LLONG_MAX	jim.h	/^#      define LLONG_MAX /;"	d
LLONG_MIN	jim-win32compat.h	/^	#define LLONG_MIN /;"	d
LLONG_MIN	jim.h	/^#      define LLONG_MIN /;"	d
ListAppendElement	jim.c	/^static void ListAppendElement(Jim_Obj *listPtr, Jim_Obj *objPtr)$/;"	f	file:
ListAppendList	jim.c	/^static void ListAppendList(Jim_Obj *listPtr, Jim_Obj *appendListPtr)$/;"	f	file:
ListElementQuotingType	jim.c	/^static unsigned char ListElementQuotingType(const char *s, int len)$/;"	f	file:
ListInsertElements	jim.c	/^static void ListInsertElements(Jim_Obj *listPtr, int idx, int elemc, Jim_Obj *const *elemVec)$/;"	f	file:
ListRemoveDuplicates	jim.c	/^static void ListRemoveDuplicates(Jim_Obj *listObjPtr, int (*comp)(Jim_Obj **lhs, Jim_Obj **rhs))$/;"	f	file:
ListSetIndex	jim.c	/^static int ListSetIndex(Jim_Interp *interp, Jim_Obj *listPtr, int idx,$/;"	f	file:
ListSortCommand	jim.c	/^static int ListSortCommand(Jim_Obj **lhsObj, Jim_Obj **rhsObj)$/;"	f	file:
ListSortElements	jim.c	/^static int ListSortElements(Jim_Interp *interp, Jim_Obj *listObjPtr, struct lsort_info *info)$/;"	f	file:
ListSortIndexHelper	jim.c	/^static int ListSortIndexHelper(Jim_Obj **lhsObj, Jim_Obj **rhsObj)$/;"	f	file:
ListSortInteger	jim.c	/^static int ListSortInteger(Jim_Obj **lhsObj, Jim_Obj **rhsObj)$/;"	f	file:
ListSortReal	jim.c	/^static int ListSortReal(Jim_Obj **lhsObj, Jim_Obj **rhsObj)$/;"	f	file:
ListSortString	jim.c	/^static int ListSortString(Jim_Obj **lhsObj, Jim_Obj **rhsObj)$/;"	f	file:
ListSortStringNoCase	jim.c	/^static int ListSortStringNoCase(Jim_Obj **lhsObj, Jim_Obj **rhsObj)$/;"	f	file:
MAX_FLOAT_WIDTH	jim-format.c	/^#define MAX_FLOAT_WIDTH /;"	d	file:
MAX_INT_IN_DOUBLE	jim.c	/^#define MAX_INT_IN_DOUBLE /;"	d	file:
MAX_UTF8_LEN	utf8.h	/^#define MAX_UTF8_LEN /;"	d
MIN_INT_IN_DOUBLE	jim.c	/^#define MIN_INT_IN_DOUBLE /;"	d	file:
NUM_COMMON	jim.c	/^#define NUM_COMMON /;"	d	file:
OPRINIT	jim.c	/^#define OPRINIT(/;"	d	file:
OPRINIT	jim.c	/^#undef OPRINIT$/;"	d	file:
OPRINIT_ATTR	jim.c	/^#define OPRINIT_ATTR(/;"	d	file:
OPRINIT_LAZY	jim.c	/^#undef OPRINIT_LAZY$/;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.6.1/CompilerIdC/CMakeCCompilerId.c	/^#  define PLATFORM_ID /;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.6.1/CompilerIdC/CMakeCCompilerId.c	/^#  define PLATFORM_ID$/;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.6.1/CompilerIdC/CMakeCCompilerId.c	/^# define PLATFORM_ID /;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.6.1/CompilerIdC/CMakeCCompilerId.c	/^# define PLATFORM_ID$/;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.6.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define PLATFORM_ID /;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.6.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define PLATFORM_ID$/;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.6.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define PLATFORM_ID /;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.6.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define PLATFORM_ID$/;"	d	file:
PRNG_SEED_SIZE	jim.c	/^#define PRNG_SEED_SIZE /;"	d	file:
ParseToken	jim.c	/^} ParseToken;$/;"	t	typeref:struct:__anon1	file:
ParseTokenList	jim.c	/^} ParseTokenList;$/;"	t	typeref:struct:__anon2	file:
RIGHT_ASSOC	jim.c	/^    RIGHT_ASSOC, \/* reuse this field for right associativity too *\/$/;"	e	enum:__anon5	file:
RM	build/Makefile	/^RM = \/usr\/local\/Cellar\/cmake\/3.6.1\/bin\/cmake -E remove -f$/;"	m
SHELL	build/Makefile	/^SHELL = \/bin\/sh$/;"	m
SIMULATE_ID	build/CMakeFiles/3.6.1/CompilerIdC/CMakeCCompilerId.c	/^#  define SIMULATE_ID /;"	d	file:
SIMULATE_ID	build/CMakeFiles/3.6.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define SIMULATE_ID /;"	d	file:
SIMULATE_VERSION_MAJOR	build/CMakeFiles/3.6.1/CompilerIdC/CMakeCCompilerId.c	/^#  define SIMULATE_VERSION_MAJOR /;"	d	file:
SIMULATE_VERSION_MAJOR	build/CMakeFiles/3.6.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define SIMULATE_VERSION_MAJOR /;"	d	file:
SIMULATE_VERSION_MINOR	build/CMakeFiles/3.6.1/CompilerIdC/CMakeCCompilerId.c	/^#  define SIMULATE_VERSION_MINOR /;"	d	file:
SIMULATE_VERSION_MINOR	build/CMakeFiles/3.6.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define SIMULATE_VERSION_MINOR /;"	d	file:
SIZEOF_OFF_T	jimautoconf.h	/^#define SIZEOF_OFF_T /;"	d
STATIC_QUOTING_LEN	jim.c	/^    #define STATIC_QUOTING_LEN /;"	d	file:
STRINGIFY	build/CMakeFiles/3.6.1/CompilerIdC/CMakeCCompilerId.c	/^#define STRINGIFY(/;"	d	file:
STRINGIFY	build/CMakeFiles/3.6.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#define STRINGIFY(/;"	d	file:
STRINGIFY_HELPER	build/CMakeFiles/3.6.1/CompilerIdC/CMakeCCompilerId.c	/^#define STRINGIFY_HELPER(/;"	d	file:
STRINGIFY_HELPER	build/CMakeFiles/3.6.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#define STRINGIFY_HELPER(/;"	d	file:
SUFFIXES	build/Makefile	/^SUFFIXES =$/;"	m
SWITCH_CMD	jim.c	/^{ SWITCH_EXACT, SWITCH_GLOB, SWITCH_RE, SWITCH_CMD };$/;"	e	enum:__anon7	file:
SWITCH_EXACT	jim.c	/^{ SWITCH_EXACT, SWITCH_GLOB, SWITCH_RE, SWITCH_CMD };$/;"	e	enum:__anon7	file:
SWITCH_GLOB	jim.c	/^{ SWITCH_EXACT, SWITCH_GLOB, SWITCH_RE, SWITCH_CMD };$/;"	e	enum:__anon7	file:
SWITCH_RE	jim.c	/^{ SWITCH_EXACT, SWITCH_GLOB, SWITCH_RE, SWITCH_CMD };$/;"	e	enum:__anon7	file:
ScanFmtPartDescr	jim.c	/^typedef struct ScanFmtPartDescr$/;"	s	file:
ScanFmtPartDescr	jim.c	/^} ScanFmtPartDescr;$/;"	t	typeref:struct:ScanFmtPartDescr	file:
ScanFmtStringObj	jim.c	/^typedef struct ScanFmtStringObj$/;"	s	file:
ScanFmtStringObj	jim.c	/^} ScanFmtStringObj;$/;"	t	typeref:struct:ScanFmtStringObj	file:
ScanOneEntry	jim.c	/^static int ScanOneEntry(Jim_Interp *interp, const char *str, int pos, int strLen,$/;"	f	file:
ScriptAddToken	jim.c	/^static void ScriptAddToken(ParseTokenList *tokenlist, const char *token, int len, int type,$/;"	f	file:
ScriptObj	jim.c	/^typedef struct ScriptObj$/;"	s	file:
ScriptObj	jim.c	/^} ScriptObj;$/;"	t	typeref:struct:ScriptObj	file:
ScriptObjAddTokens	jim.c	/^static void ScriptObjAddTokens(Jim_Interp *interp, struct ScriptObj *script,$/;"	f	file:
ScriptToken	jim.c	/^typedef struct ScriptToken$/;"	s	file:
ScriptToken	jim.c	/^} ScriptToken;$/;"	t	typeref:struct:ScriptToken	file:
ScriptTokenListFree	jim.c	/^static void ScriptTokenListFree(ParseTokenList *tokenlist)$/;"	f	file:
ScriptTokenListInit	jim.c	/^static void ScriptTokenListInit(ParseTokenList *tokenlist)$/;"	f	file:
SetBooleanFromAny	jim.c	/^static int SetBooleanFromAny(Jim_Interp *interp, Jim_Obj *objPtr, int flags)$/;"	f	file:
SetDictFromAny	jim.c	/^static int SetDictFromAny(Jim_Interp *interp, struct Jim_Obj *objPtr)$/;"	f	file:
SetDictSubstFromAny	jim.c	/^static void SetDictSubstFromAny(Jim_Interp *interp, Jim_Obj *objPtr)$/;"	f	file:
SetDoubleFromAny	jim.c	/^static int SetDoubleFromAny(Jim_Interp *interp, Jim_Obj *objPtr)$/;"	f	file:
SetExprFromAny	jim.c	/^static int SetExprFromAny(Jim_Interp *interp, struct Jim_Obj *objPtr)$/;"	f	file:
SetIndexFromAny	jim.c	/^static int SetIndexFromAny(Jim_Interp *interp, Jim_Obj *objPtr)$/;"	f	file:
SetIntFromAny	jim.c	/^static int SetIntFromAny(Jim_Interp *interp, Jim_Obj *objPtr, int flags)$/;"	f	file:
SetListFromAny	jim.c	/^static int SetListFromAny(Jim_Interp *interp, struct Jim_Obj *objPtr)$/;"	f	file:
SetReferenceFromAny	jim.c	/^static int SetReferenceFromAny(Jim_Interp *interp, Jim_Obj *objPtr)$/;"	f	file:
SetReturnCodeFromAny	jim.c	/^static int SetReturnCodeFromAny(Jim_Interp *interp, Jim_Obj *objPtr)$/;"	f	file:
SetScanFmtFromAny	jim.c	/^static int SetScanFmtFromAny(Jim_Interp *interp, Jim_Obj *objPtr)$/;"	f	file:
SetStringFromAny	jim.c	/^static int SetStringFromAny(Jim_Interp *interp, Jim_Obj *objPtr)$/;"	f	file:
SetSubstFromAny	jim.c	/^static int SetSubstFromAny(Jim_Interp *interp, struct Jim_Obj *objPtr, int flags)$/;"	f	file:
SetVariableFromAny	jim.c	/^static int SetVariableFromAny(Jim_Interp *interp, struct Jim_Obj *objPtr)$/;"	f	file:
StringAppendString	jim.c	/^static void StringAppendString(Jim_Obj *objPtr, const char *str, int len)$/;"	f	file:
SubstObjAddTokens	jim.c	/^static void SubstObjAddTokens(Jim_Interp *interp, struct ScriptObj *script,$/;"	f	file:
TCL_LIBRARY	jim.c	/^#define TCL_LIBRARY /;"	d	file:
TCL_LIBRARY	jimautoconf.h	/^#define TCL_LIBRARY /;"	d
TCL_PLATFORM_OS	jim.c	/^#define TCL_PLATFORM_OS /;"	d	file:
TCL_PLATFORM_OS	jimautoconf.h	/^#define TCL_PLATFORM_OS /;"	d
TCL_PLATFORM_PATH_SEPARATOR	jim.c	/^#define TCL_PLATFORM_PATH_SEPARATOR /;"	d	file:
TCL_PLATFORM_PATH_SEPARATOR	jimautoconf.h	/^#define TCL_PLATFORM_PATH_SEPARATOR /;"	d
TCL_PLATFORM_PLATFORM	jim.c	/^#define TCL_PLATFORM_PLATFORM /;"	d	file:
TCL_PLATFORM_PLATFORM	jimautoconf.h	/^#define TCL_PLATFORM_PLATFORM /;"	d
TOKEN_IS_EXPR_OP	jim.c	/^#define TOKEN_IS_EXPR_OP(/;"	d	file:
TOKEN_IS_EXPR_START	jim.c	/^#define TOKEN_IS_EXPR_START(/;"	d	file:
TOKEN_IS_SEP	jim.c	/^#define TOKEN_IS_SEP(/;"	d	file:
UCHAR	jim.h	/^#define UCHAR(/;"	d
USE_LINENOISE	jimautoconf.h	/^#undef USE_LINENOISE$/;"	d
UTF8_UTIL_H	utf8.h	/^#define UTF8_UTIL_H$/;"	d
UpdateStringOfDict	jim.c	/^static void UpdateStringOfDict(struct Jim_Obj *objPtr)$/;"	f	file:
UpdateStringOfDouble	jim.c	/^static void UpdateStringOfDouble(struct Jim_Obj *objPtr)$/;"	f	file:
UpdateStringOfIndex	jim.c	/^static void UpdateStringOfIndex(struct Jim_Obj *objPtr)$/;"	f	file:
UpdateStringOfInt	jim.c	/^static void UpdateStringOfInt(struct Jim_Obj *objPtr)$/;"	f	file:
UpdateStringOfList	jim.c	/^static void UpdateStringOfList(struct Jim_Obj *objPtr)$/;"	f	file:
UpdateStringOfReference	jim.c	/^static void UpdateStringOfReference(struct Jim_Obj *objPtr)$/;"	f	file:
UpdateStringOfScanFmt	jim.c	/^static void UpdateStringOfScanFmt(Jim_Obj *objPtr)$/;"	f	file:
_GNU_SOURCE	jim.c	/^#define _GNU_SOURCE /;"	d	file:
_JIMAUTOCONF_H	jimautoconf.h	/^#define _JIMAUTOCONF_H$/;"	d
_JIM_CONFIG_H	jim-config.h	/^#define _JIM_CONFIG_H$/;"	d
__JIM__H	jim.h	/^#define __JIM__H$/;"	d
addStackTrace	jim.h	/^    int addStackTrace; \/* > 0 if a level should be added to the stack trace *\/$/;"	m	struct:Jim_Interp
altcode	utf8.c	/^    unsigned short altcode;     \/* alternate case code point *\/$/;"	m	struct:casemap	file:
arg	jim.c	/^    char *arg;                  \/* Specification of a CHARSET conversion *\/$/;"	m	struct:ScanFmtPartDescr	file:
argListLen	jim.h	/^            int argListLen;             \/* Length of argListObjPtr *\/$/;"	m	struct:Jim_Cmd::__anon21::__anon23
argListObjPtr	jim.h	/^            Jim_Obj *argListObjPtr;$/;"	m	struct:Jim_Cmd::__anon21::__anon23
argc	jim.h	/^            int argc;$/;"	m	struct:Jim_Obj::__anon10::__anon20
argc	jim.h	/^    int argc; \/* number of args of the current procedure call. *\/$/;"	m	struct:Jim_CallFrame
arglist	jim.h	/^            } *arglist;$/;"	m	struct:Jim_Cmd::__anon21::__anon23	typeref:struct:Jim_Cmd::__anon21::__anon23::Jim_ProcArg
argsPos	jim.h	/^            int argsPos;                \/* Position of 'args', if specified, or -1 *\/$/;"	m	struct:Jim_Cmd::__anon21::__anon23
argv	jim.h	/^    Jim_Obj *const *argv; \/* object vector of the current procedure call. *\/$/;"	m	struct:Jim_CallFrame
arity	jim.c	/^    unsigned char arity;$/;"	m	struct:Jim_ExprOperator	file:
assocData	jim.h	/^    struct Jim_HashTable assocData; \/* per-interp storage for use by packages *\/$/;"	m	struct:Jim_Interp	typeref:struct:Jim_Interp::Jim_HashTable
bodyObjPtr	jim.h	/^            Jim_Obj *bodyObjPtr;$/;"	m	struct:Jim_Cmd::__anon21::__anon23
bytes	jim.h	/^    char *bytes; \/* string representation buffer. NULL = no string repr. *\/$/;"	m	struct:Jim_Obj
callFrameEpoch	jim.h	/^    unsigned long callFrameEpoch; \/* Incremented every time a new$/;"	m	struct:Jim_Interp
callFrameId	jim.h	/^            unsigned long callFrameId; \/* for caching *\/$/;"	m	struct:Jim_Obj::__anon10::__anon12
casemap	utf8.c	/^struct casemap {$/;"	s	file:
ch	jim.c	/^    int ch;             \/* At end of parse, ' ' if complete or '{', '[', '"', '\\\\' , '{' if incomplete *\/$/;"	m	struct:JimParseMissing	file:
charLength	jim.h	/^            int charLength;     \/* utf-8 char length. -1 if unknown *\/$/;"	m	struct:Jim_Obj::__anon10::__anon15
cmdPrivData	jim.h	/^    void *cmdPrivData; \/* Used to pass the private data pointer to$/;"	m	struct:Jim_Interp
cmdProc	jim.c	/^    Jim_CmdProc *cmdProc;$/;"	m	struct:__anon8	file:
cmdProc	jim.h	/^            Jim_CmdProc *cmdProc; \/* The command implementation *\/$/;"	m	struct:Jim_Cmd::__anon21::__anon22
cmdPtr	jim.h	/^            struct Jim_Cmd *cmdPtr;$/;"	m	struct:Jim_Obj::__anon10::__anon13	typeref:struct:Jim_Obj::__anon10::__anon13::Jim_Cmd
cmdValue	jim.h	/^        } cmdValue;$/;"	m	union:Jim_Obj::__anon10	typeref:struct:Jim_Obj::__anon10::__anon13
cmp_casemap	utf8.c	/^static int cmp_casemap(const void *key, const void *cm)$/;"	f	file:
cmp_range	utf8.c	/^static int cmp_range(const void *key, const void *cm)$/;"	f	file:
code	utf8.c	/^    unsigned short code;        \/* code point *\/$/;"	m	struct:casemap	file:
coercedDoubleObjType	jim.c	/^static const Jim_ObjType coercedDoubleObjType = {$/;"	v	file:
collisions	jim.h	/^    unsigned int collisions;$/;"	m	struct:Jim_HashTable
command	jim.c	/^    Jim_Obj *command;$/;"	m	struct:lsort_info	file:
commandObjType	jim.c	/^static const Jim_ObjType commandObjType = {$/;"	v	file:
commands	jim.h	/^    struct Jim_HashTable commands; \/* Commands hash table *\/$/;"	m	struct:Jim_Interp	typeref:struct:Jim_Interp::Jim_HashTable
comment	jim.c	/^    int comment;                \/* Non zero if the next chars may be a comment. *\/$/;"	m	struct:JimParserCtx	file:
comparedStringObjType	jim.c	/^static const Jim_ObjType comparedStringObjType = {$/;"	v	file:
compre	jim.h	/^            void *compre;       \/* really an allocated (regex_t *) *\/$/;"	m	struct:Jim_Obj::__anon10::__anon19
const	build/CMakeFiles/3.6.1/CompilerIdC/CMakeCCompilerId.c	/^# define const$/;"	d	file:
convCount	jim.c	/^    size_t convCount;           \/* Number of conversions that will assign *\/$/;"	m	struct:ScanFmtStringObj	file:
count	jim.c	/^    int count;                  \/* Number of entries used *\/$/;"	m	struct:__anon2	file:
count	jim.c	/^    size_t count;               \/* Number of ScanFmtPartDescr contained *\/$/;"	m	struct:ScanFmtStringObj	file:
currentScriptObj	jim.h	/^    Jim_Obj *currentScriptObj; \/* Script currently in execution. *\/$/;"	m	struct:Jim_Interp
d_name	jim-win32compat.h	/^	char *d_name;$/;"	m	struct:dirent
data	jim.c	/^    void *data;$/;"	m	struct:AssocDataValue	file:
defaultObjPtr	jim.h	/^                Jim_Obj *defaultObjPtr; \/* Default value, (or rename for $args) *\/$/;"	m	struct:Jim_Cmd::__anon21::__anon23::Jim_ProcArg
default_trim_chars	jim.c	/^static const char default_trim_chars[] = " \\t\\n\\r";$/;"	v	file:
default_trim_chars_len	jim.c	/^static int default_trim_chars_len = sizeof(default_trim_chars);$/;"	v	file:
delProc	jim.c	/^    Jim_InterpDeleteProc *delProc;$/;"	m	struct:AssocDataValue	file:
delProc	jim.h	/^            Jim_DelCmdProc *delProc; \/* Called when the command is deleted if != NULL *\/$/;"	m	struct:Jim_Cmd::__anon21::__anon22
descr	jim.c	/^    ScanFmtPartDescr descr[1];  \/* The vector of partial descriptions *\/$/;"	m	struct:ScanFmtStringObj	file:
dictObjType	jim.c	/^static const Jim_ObjType dictObjType = {$/;"	v	file:
dictSubstObjType	jim.c	/^static const Jim_ObjType dictSubstObjType = {$/;"	v	file:
dictSubstValue	jim.h	/^        } dictSubstValue;$/;"	m	union:Jim_Obj::__anon10	typeref:struct:Jim_Obj::__anon10::__anon18
dirent	jim-win32compat.h	/^struct dirent {$/;"	s
doubleObjType	jim.c	/^static const Jim_ObjType doubleObjType = {$/;"	v	file:
doubleValue	jim.h	/^        double doubleValue;$/;"	m	union:Jim_Obj::__anon10
dupIntRepProc	jim.h	/^    Jim_DupInternalRepProc *dupIntRepProc;$/;"	m	struct:Jim_ObjType
ele	jim.h	/^            struct Jim_Obj **ele;    \/* Elements vector *\/$/;"	m	struct:Jim_Obj::__anon10::__anon14	typeref:struct:Jim_Obj::__anon10::__anon14::Jim_Obj
emptyObj	jim.h	/^    Jim_Obj *emptyObj; \/* Shared empty string object. *\/$/;"	m	struct:Jim_Interp
entry	jim.h	/^    Jim_HashEntry *entry, *nextEntry;$/;"	m	struct:Jim_HashTableIterator
eof	jim.c	/^    int eof;                    \/* Non zero if EOF condition is true. *\/$/;"	m	struct:JimParserCtx	file:
error	jim.c	/^    const char *error;          \/* Ptr to error text (NULL if no error *\/$/;"	m	struct:ScanFmtStringObj	file:
errorFileNameObj	jim.h	/^    Jim_Obj *errorFileNameObj; \/* Error file where an error occurred. *\/$/;"	m	struct:Jim_Interp
errorFlag	jim.h	/^    int errorFlag; \/* Set if an error occurred during execution. *\/$/;"	m	struct:Jim_Interp
errorLine	jim.h	/^    int errorLine; \/* Error line where an error occurred. *\/$/;"	m	struct:Jim_Interp
errorProc	jim.h	/^    Jim_Obj *errorProc; \/* Name of last procedure which returned an error *\/$/;"	m	struct:Jim_Interp
evalDepth	jim.h	/^    int evalDepth;  \/* Current eval depth *\/$/;"	m	struct:Jim_Interp
exitCode	jim.h	/^    int exitCode; \/* Code to return to the OS on JIM_EXIT. *\/$/;"	m	struct:Jim_Interp
exprObjType	jim.c	/^static const Jim_ObjType exprObjType = {$/;"	v	file:
falseObj	jim.h	/^    Jim_Obj *falseObj; \/* Shared false int object. *\/$/;"	m	struct:Jim_Interp
features	build/CMakeFiles/feature_tests.c	/^  const char features[] = {"\\n"$/;"	v
features	build/CMakeFiles/feature_tests.cxx	/^  const char features[] = {"\\n"$/;"	v
fileNameObj	jim.c	/^    Jim_Obj *fileNameObj;       \/* Filename *\/$/;"	m	struct:ScriptObj	file:
fileNameObj	jim.h	/^            struct Jim_Obj *fileNameObj;$/;"	m	struct:Jim_Obj::__anon10::__anon17	typeref:struct:Jim_Obj::__anon10::__anon17::Jim_Obj
fileNameObj	jim.h	/^    Jim_Obj *fileNameObj;       \/* file and line of caller of this proc (if available) *\/$/;"	m	struct:Jim_CallFrame
finalizerCmdNamePtr	jim.h	/^    Jim_Obj *finalizerCmdNamePtr;$/;"	m	struct:Jim_Reference
firstline	jim.c	/^    int firstline;              \/* Line number of the first line *\/$/;"	m	struct:ScriptObj	file:
flags	jim.h	/^            unsigned flags;$/;"	m	struct:Jim_Obj::__anon10::__anon19
flags	jim.h	/^    int flags;$/;"	m	struct:Jim_ObjType
framePtr	jim.h	/^    Jim_CallFrame *framePtr; \/* Pointer to the current call frame *\/$/;"	m	struct:Jim_Interp
freeFramesList	jim.h	/^    struct Jim_CallFrame *freeFramesList; \/* list of CallFrame structures. *\/$/;"	m	struct:Jim_Interp	typeref:struct:Jim_Interp::Jim_CallFrame
freeIntRepProc	jim.h	/^    Jim_FreeInternalRepProc *freeIntRepProc;$/;"	m	struct:Jim_ObjType
freeList	jim.h	/^    Jim_Obj *freeList; \/* Linked list of all the unused objects. *\/$/;"	m	struct:Jim_Interp
funcop	jim.c	/^    int (*funcop) (Jim_Interp *interp, struct JimExprState * e);$/;"	m	struct:Jim_ExprOperator	file:
global	jim.h	/^            int global; \/* If the variable name is globally scoped with :: *\/$/;"	m	struct:Jim_Obj::__anon10::__anon12
handle	jim-win32compat.h	/^	long                handle; \/* -1 for failed rewind *\/$/;"	m	struct:DIR
hashFunction	jim.h	/^    unsigned int (*hashFunction)(const void *key);$/;"	m	struct:Jim_HashTableType
ht	jim.h	/^    Jim_HashTable *ht;$/;"	m	struct:Jim_HashTableIterator
i	jim.h	/^    unsigned int i, j;$/;"	m	struct:Jim_PrngState
id	jim.h	/^            unsigned long id;$/;"	m	struct:Jim_Obj::__anon10::__anon16
id	jim.h	/^    long id; \/* Hold unique id for various purposes *\/$/;"	m	struct:Jim_Interp
id	jim.h	/^    unsigned long id; \/* Call Frame ID. Used for caching. *\/$/;"	m	struct:Jim_CallFrame
idx	jim.c	/^    int idx;$/;"	m	struct:__anon6	file:
inUse	jim.c	/^    int inUse;                  \/* Used for sharing. *\/$/;"	m	struct:ExprByteCode	file:
inUse	jim.c	/^    int inUse;                  \/* Used to share a ScriptObj. Currently$/;"	m	struct:ScriptObj	file:
inUse	jim.h	/^    int inUse;           \/* Reference count *\/$/;"	m	struct:Jim_Cmd
index	jim.c	/^    int index;$/;"	m	struct:lsort_info	file:
index	jim.h	/^    int index;$/;"	m	struct:Jim_HashTableIterator
indexObjPtr	jim.h	/^            struct Jim_Obj *indexObjPtr;$/;"	m	struct:Jim_Obj::__anon10::__anon18	typeref:struct:Jim_Obj::__anon10::__anon18::Jim_Obj
indexObjType	jim.c	/^static const Jim_ObjType indexObjType = {$/;"	v	file:
indexed	jim.c	/^    int indexed;$/;"	m	struct:lsort_info	file:
info	jim-win32compat.h	/^	struct _finddata_t  info;$/;"	m	struct:DIR	typeref:struct:DIR::_finddata_t
info_arch	build/CMakeFiles/3.6.1/CompilerIdC/CMakeCCompilerId.c	/^char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";$/;"	v
info_arch	build/CMakeFiles/3.6.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";$/;"	v
info_compiler	build/CMakeFiles/3.6.1/CompilerIdC/CMakeCCompilerId.c	/^char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";$/;"	v
info_compiler	build/CMakeFiles/3.6.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";$/;"	v
info_cray	build/CMakeFiles/3.6.1/CompilerIdC/CMakeCCompilerId.c	/^char const *info_cray = "INFO" ":" "compiler_wrapper[CrayPrgEnv]";$/;"	v
info_cray	build/CMakeFiles/3.6.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const *info_cray = "INFO" ":" "compiler_wrapper[CrayPrgEnv]";$/;"	v
info_language_dialect_default	build/CMakeFiles/3.6.1/CompilerIdC/CMakeCCompilerId.c	/^const char* info_language_dialect_default =$/;"	v
info_language_dialect_default	build/CMakeFiles/3.6.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^const char* info_language_dialect_default = "INFO" ":" "dialect_default["$/;"	v
info_platform	build/CMakeFiles/3.6.1/CompilerIdC/CMakeCCompilerId.c	/^char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";$/;"	v
info_platform	build/CMakeFiles/3.6.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";$/;"	v
info_simulate	build/CMakeFiles/3.6.1/CompilerIdC/CMakeCCompilerId.c	/^char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";$/;"	v
info_simulate	build/CMakeFiles/3.6.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";$/;"	v
info_simulate_version	build/CMakeFiles/3.6.1/CompilerIdC/CMakeCCompilerId.c	/^char const info_simulate_version[] = {$/;"	v
info_simulate_version	build/CMakeFiles/3.6.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_simulate_version[] = {$/;"	v
info_version	build/CMakeFiles/3.6.1/CompilerIdC/CMakeCCompilerId.c	/^char const info_version[] = {$/;"	v
info_version	build/CMakeFiles/3.6.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_version[] = {$/;"	v
inquote	jim.c	/^    int inquote;                \/* Parsing a quoted string *\/$/;"	m	struct:JimParserCtx	file:
intObjType	jim.c	/^static const Jim_ObjType intObjType = {$/;"	v	file:
intValue	jim.h	/^        int intValue;$/;"	m	union:Jim_Obj::__anon10
internalRep	jim.h	/^    } internalRep;$/;"	m	struct:Jim_Obj	typeref:union:Jim_Obj::__anon10
interp	jim.c	/^    Jim_Interp *interp;$/;"	m	struct:lsort_info	file:
interp_gc	tclmeta.c	/^static int interp_gc(lua_State *L)$/;"	f	file:
interp_get	tclmeta.c	/^struct Jim_Interp *interp_get(lua_State *L)$/;"	f
interp_instance	tclmeta.c	/^static const char interp_instance[1];$/;"	v	file:
interp_meta	tclmeta.c	/^static const struct luaL_reg interp_meta[] = {$/;"	v	typeref:struct:luaL_reg	file:
interp_typename	tclmeta.c	/^static const char interp_typename[] = "tclmeta.interp";$/;"	v	file:
interpolatedObjType	jim.c	/^static const Jim_ObjType interpolatedObjType = {$/;"	v	file:
intval	jim.h	/^        int intval;$/;"	m	union:Jim_HashEntry::__anon9
isinf	jim.c	/^#define isinf(/;"	d	file:
isinf	jim.c	/^#undef isinf$/;"	d	file:
isnan	jim.c	/^#define isnan(/;"	d	file:
isnan	jim.c	/^#undef isnan$/;"	d	file:
isproc	jim.h	/^    int isproc;          \/* Is this a procedure? *\/$/;"	m	struct:Jim_Cmd
isrefchar	jim.c	/^static int isrefchar(int c)$/;"	f	file:
j	jim.h	/^    unsigned int i, j;$/;"	m	struct:Jim_PrngState
jimReturnCodes	jim.c	/^static const char * const jimReturnCodes[] = {$/;"	v	file:
jimReturnCodesSize	jim.c	/^#define jimReturnCodesSize /;"	d	file:
jim_ext_aio	jimautoconf.h	/^#undef jim_ext_aio$/;"	d
jim_ext_array	jimautoconf.h	/^#undef jim_ext_array$/;"	d
jim_ext_binary	jimautoconf.h	/^#undef jim_ext_binary$/;"	d
jim_ext_clock	jimautoconf.h	/^#undef jim_ext_clock$/;"	d
jim_ext_eventloop	jimautoconf.h	/^#undef jim_ext_eventloop$/;"	d
jim_ext_exec	jimautoconf.h	/^#undef jim_ext_exec$/;"	d
jim_ext_file	jimautoconf.h	/^#undef jim_ext_file$/;"	d
jim_ext_glob	jimautoconf.h	/^#undef jim_ext_glob$/;"	d
jim_ext_history	jimautoconf.h	/^#undef jim_ext_history$/;"	d
jim_ext_interp	jimautoconf.h	/^#undef jim_ext_interp$/;"	d
jim_ext_load	jimautoconf.h	/^#undef jim_ext_load$/;"	d
jim_ext_namespace	jimautoconf.h	/^#undef jim_ext_namespace$/;"	d
jim_ext_nshelper	jimautoconf.h	/^#undef jim_ext_nshelper$/;"	d
jim_ext_oo	jimautoconf.h	/^#undef jim_ext_oo$/;"	d
jim_ext_pack	jimautoconf.h	/^#undef jim_ext_pack$/;"	d
jim_ext_package	jimautoconf.h	/^#undef jim_ext_package$/;"	d
jim_ext_posix	jimautoconf.h	/^#undef jim_ext_posix$/;"	d
jim_ext_readdir	jimautoconf.h	/^#undef jim_ext_readdir$/;"	d
jim_ext_regexp	jimautoconf.h	/^#undef jim_ext_regexp$/;"	d
jim_ext_signal	jimautoconf.h	/^#undef jim_ext_signal$/;"	d
jim_ext_stdlib	jimautoconf.h	/^#undef jim_ext_stdlib$/;"	d
jim_ext_syslog	jimautoconf.h	/^#undef jim_ext_syslog$/;"	d
jim_ext_tclcompat	jimautoconf.h	/^#undef jim_ext_tclcompat$/;"	d
jim_ext_tclprefix	jimautoconf.h	/^#undef jim_ext_tclprefix$/;"	d
jim_ext_tree	jimautoconf.h	/^#undef jim_ext_tree$/;"	d
jim_isascii	jim.c	/^#define jim_isascii /;"	d	file:
jim_isascii	jim.c	/^static int jim_isascii(int c)$/;"	f	file:
jim_strtol	jim.c	/^static long jim_strtol(const char *str, char **endptr)$/;"	f	file:
jim_strtoull	jim.c	/^static jim_wide jim_strtoull(const char *str, char **endptr)$/;"	f	file:
jim_tt_name	jim.c	/^const char *jim_tt_name(int type)$/;"	f
jim_wide	jim-win32compat.h	/^#define jim_wide /;"	d
jim_wide	jim.h	/^#    define jim_wide /;"	d
jmpbuf	jim.c	/^    jmp_buf jmpbuf;$/;"	m	struct:lsort_info	file:
key	jim.h	/^    void *key;$/;"	m	struct:Jim_HashEntry
keyCompare	jim.h	/^    int (*keyCompare)(void *privdata, const void *key1, const void *key2);$/;"	m	struct:Jim_HashTableType
keyDestructor	jim.h	/^    void (*keyDestructor)(void *privdata, void *key);$/;"	m	struct:Jim_HashTableType
keyDup	jim.h	/^    void *(*keyDup)(void *privdata, const void *key);$/;"	m	struct:Jim_HashTableType
lastCollectId	jim.h	/^    unsigned long lastCollectId; \/* reference max Id of the last GC$/;"	m	struct:Jim_Interp
lastCollectTime	jim.h	/^    time_t lastCollectTime; \/* unix time of the last GC execution *\/$/;"	m	struct:Jim_Interp
lazy	jim.c	/^    unsigned char lazy;$/;"	m	struct:Jim_ExprOperator	file:
len	jim.c	/^    int len;                    \/* Length as number of tokens. *\/$/;"	m	struct:ExprByteCode	file:
len	jim.c	/^    int len;                    \/* Length of this token *\/$/;"	m	struct:__anon1	file:
len	jim.c	/^    int len;                    \/* Length of token[] *\/$/;"	m	struct:ScriptObj	file:
len	jim.c	/^    int len;                    \/* Remaining length *\/$/;"	m	struct:JimParserCtx	file:
len	jim.h	/^            int len;        \/* Length *\/$/;"	m	struct:Jim_Obj::__anon10::__anon14
len	jim.h	/^    int len;$/;"	m	struct:Jim_Stack
length	jim.h	/^    int length; \/* number of bytes in 'bytes', not including the null term. *\/$/;"	m	struct:Jim_Obj
level	jim.h	/^    int level; \/* Level of this call frame. 0 = global *\/$/;"	m	struct:Jim_CallFrame
line	jim.c	/^    int line;                   \/* Line number *\/$/;"	m	struct:__anon1	file:
line	jim.c	/^    int line;           \/* Line number starting the missing token *\/$/;"	m	struct:JimParseMissing	file:
line	jim.h	/^            int line;$/;"	m	struct:Jim_Obj::__anon10::__anon20
line	jim.h	/^    int line;$/;"	m	struct:Jim_CallFrame
lineNumber	jim.h	/^            int lineNumber;$/;"	m	struct:Jim_Obj::__anon10::__anon17
linenr	jim.c	/^    int linenr;                 \/* Current line number *\/$/;"	m	struct:JimParserCtx	file:
linenr	jim.c	/^    int linenr;                 \/* Error line number, if any *\/$/;"	m	struct:ScriptObj	file:
linkFramePtr	jim.h	/^    struct Jim_CallFrame *linkFramePtr;$/;"	m	struct:Jim_Var	typeref:struct:Jim_Var::Jim_CallFrame
list	jim.c	/^    ParseToken *list;           \/* Array of tokens *\/$/;"	m	struct:__anon2	file:
listObjType	jim.c	/^static const Jim_ObjType listObjType = {$/;"	v	file:
listValue	jim.h	/^        } listValue;$/;"	m	union:Jim_Obj::__anon10	typeref:struct:Jim_Obj::__anon10::__anon14
liveList	jim.h	/^    Jim_Obj *liveList; \/* Linked list of all the live objects. *\/$/;"	m	struct:Jim_Interp
loadHandles	jim.h	/^    Jim_Stack *loadHandles; \/* handles of loaded modules [load] *\/$/;"	m	struct:Jim_Interp
local	jim.h	/^    int local; \/* If 'local' is in effect, newly defined procs keep a reference to the old defn *\/$/;"	m	struct:Jim_Interp
localCommands	jim.h	/^    Jim_Stack *localCommands; \/* commands to be destroyed when the call frame is destroyed *\/$/;"	m	struct:Jim_CallFrame
lower	utf8.c	/^    unsigned lower;     \/* lower inclusive *\/$/;"	m	struct:utf8range	file:
lsort_info	jim.c	/^struct lsort_info {$/;"	s	file:
luaopen_tclmeta	tclmeta.c	/^int luaopen_tclmeta(lua_State *L)$/;"	f
main	build/CMakeFiles/3.6.1/CompilerIdC/CMakeCCompilerId.c	/^int main(argc, argv) int argc; char *argv[];$/;"	f
main	build/CMakeFiles/3.6.1/CompilerIdC/CMakeCCompilerId.c	/^void main() {}$/;"	f
main	build/CMakeFiles/3.6.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^int main(int argc, char* argv[])$/;"	f
main	build/CMakeFiles/feature_tests.c	/^int main(int argc, char** argv) { (void)argv; return features[argc]; }$/;"	f
main	build/CMakeFiles/feature_tests.cxx	/^int main(int argc, char** argv) { (void)argv; return features[argc]; }$/;"	f
maxCallFrameDepth	jim.h	/^    int maxCallFrameDepth; \/* Used for infinite loop detection. *\/$/;"	m	struct:Jim_Interp
maxEvalDepth	jim.h	/^    int maxEvalDepth; \/* Used for infinite loop detection. *\/$/;"	m	struct:Jim_Interp
maxLen	jim.h	/^            int maxLen;        \/* Allocated 'ele' length *\/$/;"	m	struct:Jim_Obj::__anon10::__anon14
maxLength	jim.h	/^            int maxLength;$/;"	m	struct:Jim_Obj::__anon10::__anon15
maxPos	jim.c	/^    size_t maxPos;              \/* Max position index if XPG3 is used *\/$/;"	m	struct:ScanFmtStringObj	file:
maxlen	jim.h	/^    int maxlen;$/;"	m	struct:Jim_Stack
missing	jim.c	/^    int missing;                \/* Missing char if script failed to parse, (or space or backslash if OK) *\/$/;"	m	struct:ScriptObj	file:
missing	jim.c	/^    struct JimParseMissing missing;   \/* Details of any missing quotes, etc. *\/$/;"	m	struct:JimParserCtx	typeref:struct:JimParserCtx::JimParseMissing	file:
modifier	jim.c	/^    char modifier;              \/* Modify type (e.g. l - long, h - short *\/$/;"	m	struct:ScanFmtPartDescr	file:
name	jim-win32compat.h	/^	char                *name;  \/* null-terminated char string *\/$/;"	m	struct:DIR
name	jim.c	/^    const char *name;$/;"	m	struct:Jim_ExprOperator	file:
name	jim.c	/^    const char *name;$/;"	m	struct:__anon8	file:
name	jim.h	/^    const char *name; \/* The name of the type. *\/$/;"	m	struct:Jim_ObjType
nameObjPtr	jim.h	/^                Jim_Obj *nameObjPtr;    \/* Name of this arg *\/$/;"	m	struct:Jim_Cmd::__anon21::__anon23::Jim_ProcArg
namelen	jim.c	/^    unsigned char namelen;$/;"	m	struct:Jim_ExprOperator	file:
native	jim.h	/^        } native;$/;"	m	union:Jim_Cmd::__anon21	typeref:struct:Jim_Cmd::__anon21::__anon22
next	jim.h	/^    struct Jim_CallFrame *next; \/* Callframes are in a linked list *\/$/;"	m	struct:Jim_CallFrame	typeref:struct:Jim_CallFrame::Jim_CallFrame
next	jim.h	/^    struct Jim_HashEntry *next;$/;"	m	struct:Jim_HashEntry	typeref:struct:Jim_HashEntry::Jim_HashEntry
nextEntry	jim.h	/^    Jim_HashEntry *entry, *nextEntry;$/;"	m	struct:Jim_HashTableIterator
nextObjPtr	jim.h	/^    struct Jim_Obj *nextObjPtr; \/* pointer to the next object. *\/$/;"	m	struct:Jim_Obj	typeref:struct:Jim_Obj::Jim_Obj
nsObj	jim.h	/^            Jim_Obj *nsObj;             \/* Namespace for this proc *\/$/;"	m	struct:Jim_Cmd::__anon21::__anon23
nsObj	jim.h	/^            struct Jim_Obj *nsObj;$/;"	m	struct:Jim_Obj::__anon10::__anon13	typeref:struct:Jim_Obj::__anon10::__anon13::Jim_Obj
nsObj	jim.h	/^    Jim_Obj *nsObj;             \/* Namespace for this proc call frame *\/$/;"	m	struct:Jim_CallFrame
nullScriptObj	jim.h	/^    Jim_Obj *nullScriptObj; \/* script representation of an empty string *\/$/;"	m	struct:Jim_Interp
objPtr	jim.c	/^    Jim_Obj *objPtr;$/;"	m	struct:ScriptToken	file:
objPtr	jim.c	/^    Jim_Obj *objPtr;$/;"	m	struct:__anon6	file:
objPtr	jim.h	/^    Jim_Obj *objPtr;$/;"	m	struct:Jim_Reference
objPtr	jim.h	/^    Jim_Obj *objPtr;$/;"	m	struct:Jim_Var
obj_check	tclmeta.c	/^static Jim_Obj *obj_check(lua_State *L, int index)$/;"	f	file:
obj_gc	tclmeta.c	/^static int obj_gc(lua_State *L)$/;"	f	file:
obj_get	tclmeta.c	/^static Jim_Obj *obj_get(lua_State *L, int index)$/;"	f	file:
obj_meta	tclmeta.c	/^static const struct luaL_reg obj_meta[] = {$/;"	v	typeref:struct:luaL_reg	file:
obj_new	tclmeta.c	/^static void obj_new(lua_State *L, struct Jim_Obj *obj)$/;"	f	file:
obj_tostring	tclmeta.c	/^static int obj_tostring(lua_State *L)$/;"	f	file:
obj_typename	tclmeta.c	/^static const char obj_typename[] = "tclmeta.obj";$/;"	v	file:
odigitval	jim.c	/^static int odigitval(int c)$/;"	f	file:
opcode	jim.c	/^    int opcode;$/;"	m	struct:JimExprState	file:
optArity	jim.h	/^            int optArity;               \/* Number of optional parameters *\/$/;"	m	struct:Jim_Cmd::__anon21::__anon23
order	jim.c	/^    int order;$/;"	m	struct:lsort_info	file:
p	jim.c	/^    const char *p;              \/* Pointer to the point of the program we are parsing *\/$/;"	m	struct:JimParserCtx	file:
packages	jim.h	/^    struct Jim_HashTable packages; \/* Provided packages hash table *\/$/;"	m	struct:Jim_Interp	typeref:struct:Jim_Interp::Jim_HashTable
parent	jim.h	/^    struct Jim_CallFrame *parent; \/* The parent callframe *\/$/;"	m	struct:Jim_CallFrame	typeref:struct:Jim_CallFrame::Jim_CallFrame
pos	jim.c	/^    int pos;                    \/* -1 - no assign, 0 - natural pos, >0 - XPG3 pos *\/$/;"	m	struct:ScanFmtPartDescr	file:
precedence	jim.c	/^    unsigned char precedence;$/;"	m	struct:Jim_ExprOperator	file:
prefix	jim.c	/^    char *prefix;               \/* Prefix to be scanned literally before conversion *\/$/;"	m	struct:ScanFmtPartDescr	file:
prevCmd	jim.h	/^    struct Jim_Cmd *prevCmd;    \/* Previous command defn if cmd created 'local' *\/$/;"	m	struct:Jim_Cmd	typeref:struct:Jim_Cmd::Jim_Cmd
prevObjPtr	jim.h	/^    struct Jim_Obj *prevObjPtr; \/* pointer to the prev object. *\/$/;"	m	struct:Jim_Obj	typeref:struct:Jim_Obj::Jim_Obj
privData	jim.h	/^            void *privData; \/* command-private data available via Jim_CmdPrivData() *\/$/;"	m	struct:Jim_Cmd::__anon21::__anon22
privdata	jim.h	/^    void *privdata;$/;"	m	struct:Jim_HashTable
prngState	jim.h	/^    Jim_PrngState *prngState; \/* per interpreter Random Number Gen. state. *\/$/;"	m	struct:Jim_Interp
proc	jim.h	/^        } proc;$/;"	m	union:Jim_Cmd::__anon21	typeref:struct:Jim_Cmd::__anon21::__anon23
procArgsObjPtr	jim.h	/^    Jim_Obj *procArgsObjPtr; \/* arglist object of the running procedure *\/$/;"	m	struct:Jim_CallFrame
procBodyObjPtr	jim.h	/^    Jim_Obj *procBodyObjPtr; \/* body object of the running procedure *\/$/;"	m	struct:Jim_CallFrame
procEpoch	jim.h	/^            unsigned long procEpoch; \/* for caching *\/$/;"	m	struct:Jim_Obj::__anon10::__anon13
procEpoch	jim.h	/^    unsigned long procEpoch; \/* Incremented every time the result$/;"	m	struct:Jim_Interp
ptr	jim.h	/^        void *ptr;$/;"	m	union:Jim_Obj::__anon10
ptr1	jim.h	/^            void *ptr1;$/;"	m	struct:Jim_Obj::__anon10::__anon11
ptr2	jim.h	/^            void *ptr2;$/;"	m	struct:Jim_Obj::__anon10::__anon11
qnxnto	build/CMakeFiles/3.6.1/CompilerIdC/CMakeCCompilerId.c	/^char const* qnxnto = "INFO" ":" "qnxnto[]";$/;"	v
qnxnto	build/CMakeFiles/3.6.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* qnxnto = "INFO" ":" "qnxnto[]";$/;"	v
qsortCompareStringPointers	jim.c	/^static int qsortCompareStringPointers(const void *a, const void *b)$/;"	f	file:
refCount	jim.h	/^    int refCount; \/* reference count *\/$/;"	m	struct:Jim_Obj
refPtr	jim.h	/^            struct Jim_Reference *refPtr;$/;"	m	struct:Jim_Obj::__anon10::__anon16	typeref:struct:Jim_Obj::__anon10::__anon16::Jim_Reference
refValue	jim.h	/^        } refValue;$/;"	m	union:Jim_Obj::__anon10	typeref:struct:Jim_Obj::__anon10::__anon16
referenceNextId	jim.h	/^    unsigned long referenceNextId; \/* Next id for reference. *\/$/;"	m	struct:Jim_Interp
referenceObjType	jim.c	/^static const Jim_ObjType referenceObjType = {$/;"	v	file:
references	jim.h	/^    struct Jim_HashTable references; \/* References hash table. *\/$/;"	m	struct:Jim_Interp	typeref:struct:Jim_Interp::Jim_HashTable
regexpValue	jim.h	/^        } regexpValue;$/;"	m	union:Jim_Obj::__anon10	typeref:struct:Jim_Obj::__anon10::__anon19
reqArity	jim.h	/^            int reqArity;               \/* Number of required parameters *\/$/;"	m	struct:Jim_Cmd::__anon21::__anon23
result	jim-win32compat.h	/^	struct dirent       result; \/* d_name null iff first time *\/$/;"	m	struct:DIR	typeref:struct:DIR::dirent
result	jim.h	/^    Jim_Obj *result; \/* object returned by the last command called. *\/$/;"	m	struct:Jim_Interp
returnCode	jim.h	/^    int returnCode; \/* Completion code to return on JIM_RETURN. *\/$/;"	m	struct:Jim_Interp
returnCodeObjType	jim.c	/^static const Jim_ObjType returnCodeObjType = {$/;"	v	file:
returnLevel	jim.h	/^    int returnLevel; \/* Current level of 'return -level' *\/$/;"	m	struct:Jim_Interp
sbox	jim.h	/^    unsigned char sbox[256];$/;"	m	struct:Jim_PrngState
scanFmtStringObjType	jim.c	/^static const Jim_ObjType scanFmtStringObjType = {$/;"	v	file:
scratch	jim.c	/^    char *scratch;              \/* Some scratch pad used by Jim_ScanString *\/$/;"	m	struct:ScanFmtStringObj	file:
scriptLineObjType	jim.c	/^static const Jim_ObjType scriptLineObjType = {$/;"	v	file:
scriptLineValue	jim.h	/^        } scriptLineValue;$/;"	m	union:Jim_Obj::__anon10	typeref:struct:Jim_Obj::__anon10::__anon20
scriptObjType	jim.c	/^static const Jim_ObjType scriptObjType = {$/;"	v	file:
sigmask	jim.h	/^    jim_wide sigmask;  \/* Bit mask of caught signals, or 0 if none *\/$/;"	m	struct:Jim_Interp
signal_level	jim.h	/^    int signal_level; \/* A nesting level of catch -signal *\/$/;"	m	struct:Jim_Interp
signal_set_result	jim.h	/^    int (*signal_set_result)(struct Jim_Interp *interp, jim_wide sigmask); \/* Set a result for the sigmask *\/$/;"	m	struct:Jim_Interp
size	jim.c	/^    int size;                   \/* Current size of the list *\/$/;"	m	struct:__anon2	file:
size	jim.c	/^    jim_wide size;              \/* Size of internal repr in bytes *\/$/;"	m	struct:ScanFmtStringObj	file:
size	jim.h	/^    unsigned int size;$/;"	m	struct:Jim_HashTable
sizemask	jim.h	/^    unsigned int sizemask;$/;"	m	struct:Jim_HashTable
skip	jim.c	/^    int skip;$/;"	m	struct:JimExprState	file:
sort_info	jim.c	/^static struct lsort_info *sort_info;$/;"	v	typeref:struct:lsort_info	file:
sourceObjType	jim.c	/^static const Jim_ObjType sourceObjType = {$/;"	v	file:
sourceValue	jim.h	/^        } sourceValue;$/;"	m	union:Jim_Obj::__anon10	typeref:struct:Jim_Obj::__anon10::__anon17
stack	jim.c	/^    Jim_Obj **stack;$/;"	m	struct:JimExprState	file:
stackTrace	jim.h	/^    Jim_Obj *stackTrace; \/* Stack trace object. *\/$/;"	m	struct:Jim_Interp
stacklen	jim.c	/^    int stacklen;$/;"	m	struct:JimExprState	file:
staticVars	jim.h	/^            Jim_HashTable *staticVars;  \/* Static vars hash table. NULL if no statics. *\/$/;"	m	struct:Jim_Cmd::__anon21::__anon23
staticVars	jim.h	/^    struct Jim_HashTable *staticVars; \/* pointer to procedure static vars *\/$/;"	m	struct:Jim_CallFrame	typeref:struct:Jim_CallFrame::Jim_HashTable
static_list	jim.c	/^    ParseToken static_list[20]; \/* Small initial token space to avoid allocation *\/$/;"	m	struct:__anon2	file:
strValue	jim.h	/^        } strValue;$/;"	m	union:Jim_Obj::__anon10	typeref:struct:Jim_Obj::__anon10::__anon15
strcasecmp	jim-win32compat.h	/^#define strcasecmp /;"	d
stringObjType	jim.c	/^static const Jim_ObjType stringObjType = {$/;"	v	file:
stringRep	jim.c	/^    char *stringRep;            \/* Original string representation *\/$/;"	m	struct:ScanFmtStringObj	file:
strtod	jim-win32compat.h	/^#define strtod /;"	d
strtoull	jim-win32compat.h	/^#define strtoull /;"	d
strtoull	jim.h	/^#    define strtoull /;"	d
subfn	jim.c	/^    int (*subfn)(Jim_Obj **, Jim_Obj **);$/;"	m	struct:lsort_info	file:
substFlags	jim.c	/^    int substFlags;             \/* flags used for the compilation of "subst" objects *\/$/;"	m	struct:ScriptObj	file:
table	jim.h	/^    Jim_HashEntry **table;$/;"	m	struct:Jim_HashTable
tag	jim.h	/^    char tag[JIM_REFERENCE_TAGLEN+1];$/;"	m	struct:Jim_Reference
tailcallCmd	jim.h	/^    struct Jim_Cmd *tailcallCmd;  \/* Resolved command for pending tailcall invocation *\/$/;"	m	struct:Jim_CallFrame	typeref:struct:Jim_CallFrame::Jim_Cmd
tailcallObj	jim.h	/^    struct Jim_Obj *tailcallObj;  \/* Pending tailcall invocation *\/$/;"	m	struct:Jim_CallFrame	typeref:struct:Jim_CallFrame::Jim_Obj
tcl_corecmd	tclmeta.c	/^static int tcl_corecmd(lua_State *L)$/;"	f	file:
tclmeta	tclmeta.c	/^static const struct luaL_reg tclmeta[] = {$/;"	v	typeref:struct:luaL_reg	file:
tend	jim.c	/^    const char *tend;           \/* Returned token is at tstart-tend in 'prg'. *\/$/;"	m	struct:JimParserCtx	file:
timeval	jim-win32compat.h	/^struct timeval {$/;"	s
tline	jim.c	/^    int tline;                  \/* Line number of the returned token *\/$/;"	m	struct:JimParserCtx	file:
token	jim.c	/^    ScriptToken *token;         \/* Tokens array. *\/$/;"	m	struct:ExprByteCode	file:
token	jim.c	/^    ScriptToken *token;         \/* Tokens array. *\/$/;"	m	struct:ScriptObj	file:
token	jim.c	/^    const char *token;          \/* Pointer to the start of the token *\/$/;"	m	struct:__anon1	file:
topFramePtr	jim.h	/^    Jim_CallFrame *topFramePtr; \/* toplevel\/global frame pointer. *\/$/;"	m	struct:Jim_Interp
trueObj	jim.h	/^    Jim_Obj *trueObj; \/* Shared true int object. *\/$/;"	m	struct:Jim_Interp
tstart	jim.c	/^    const char *tstart;$/;"	m	struct:JimParserCtx	file:
tt	jim.c	/^    int tt;                     \/* Token type *\/$/;"	m	struct:JimParserCtx	file:
tv_sec	jim-win32compat.h	/^	long tv_sec;$/;"	m	struct:timeval
tv_usec	jim-win32compat.h	/^	long tv_usec;$/;"	m	struct:timeval
twoPtrValue	jim.h	/^        } twoPtrValue;$/;"	m	union:Jim_Obj::__anon10	typeref:struct:Jim_Obj::__anon10::__anon11
type	jim.c	/^    char type;                  \/* Type of conversion (e.g. c, d, f) *\/$/;"	m	struct:ScanFmtPartDescr	file:
type	jim.c	/^    int type;                   \/* Token type *\/$/;"	m	struct:__anon1	file:
type	jim.c	/^    int type;$/;"	m	struct:ScriptToken	file:
type	jim.c	/^    } type;$/;"	m	struct:lsort_info	typeref:enum:lsort_info::__anon3	file:
type	jim.h	/^    const Jim_HashTableType *type;$/;"	m	struct:Jim_HashTable
typePtr	jim.h	/^    const struct Jim_ObjType *typePtr; \/* object type. *\/$/;"	m	struct:Jim_Obj	typeref:struct:Jim_Obj::Jim_ObjType
u	jim.h	/^    } u;$/;"	m	struct:Jim_Cmd	typeref:union:Jim_Cmd::__anon21
u	jim.h	/^    } u;$/;"	m	struct:Jim_HashEntry	typeref:union:Jim_HashEntry::__anon9
uniq	jim.h	/^    unsigned int uniq;$/;"	m	struct:Jim_HashTable
unique	jim.c	/^    int unique;$/;"	m	struct:lsort_info	file:
unknown	jim.h	/^    Jim_Obj *unknown; \/* Unknown command cache *\/$/;"	m	struct:Jim_Interp
unknown_called	jim.h	/^    int unknown_called; \/* The unknown command has been invoked *\/$/;"	m	struct:Jim_Interp
upcall	jim.h	/^            int upcall;                 \/* True if proc is currently in upcall *\/$/;"	m	struct:Jim_Cmd::__anon21::__anon23
updateStringProc	jim.h	/^    Jim_UpdateStringProc *updateStringProc;$/;"	m	struct:Jim_ObjType
upper	utf8.c	/^    unsigned upper;     \/* upper exclusive *\/$/;"	m	struct:utf8range	file:
used	jim.h	/^    unsigned int used;$/;"	m	struct:Jim_HashTable
utf8_charlen	utf8.c	/^int utf8_charlen(int c)$/;"	f
utf8_charlen	utf8.h	/^#define utf8_charlen(/;"	d
utf8_fromunicode	utf8.c	/^int utf8_fromunicode(char *p, unsigned uc)$/;"	f
utf8_getchars	utf8.h	/^#define utf8_getchars /;"	d
utf8_getchars	utf8.h	/^#define utf8_getchars(/;"	d
utf8_in_range	utf8.c	/^static int utf8_in_range(const struct utf8range *range, int num, int ch)$/;"	f	file:
utf8_index	utf8.c	/^int utf8_index(const char *str, int index)$/;"	f
utf8_index	utf8.h	/^#define utf8_index(/;"	d
utf8_lower	utf8.c	/^int utf8_lower(int ch)$/;"	f
utf8_lower	utf8.h	/^#define utf8_lower(/;"	d
utf8_map_case	utf8.c	/^static int utf8_map_case(const struct casemap *mapping, int num, int ch)$/;"	f	file:
utf8_memchr	jim.c	/^static const char *utf8_memchr(const char *str, int len, int c)$/;"	f	file:
utf8_prev_len	utf8.c	/^int utf8_prev_len(const char *str, int len)$/;"	f
utf8_prev_len	utf8.h	/^#define utf8_prev_len(/;"	d
utf8_strlen	utf8.c	/^int utf8_strlen(const char *str, int bytelen)$/;"	f
utf8_strlen	utf8.h	/^#define utf8_strlen(/;"	d
utf8_strwidth	utf8.c	/^int utf8_strwidth(const char *str, int charlen)$/;"	f
utf8_strwidth	utf8.h	/^#define utf8_strwidth(/;"	d
utf8_title	utf8.c	/^int utf8_title(int ch)$/;"	f
utf8_title	utf8.h	/^#define utf8_title(/;"	d
utf8_tounicode	utf8.c	/^int utf8_tounicode(const char *str, int *uc)$/;"	f
utf8_tounicode	utf8.h	/^#define utf8_tounicode(/;"	d
utf8_tounicode_case	jim.c	/^static int utf8_tounicode_case(const char *s, int *uc, int upper)$/;"	f	file:
utf8_upper	utf8.c	/^int utf8_upper(int ch)$/;"	f
utf8_upper	utf8.h	/^#define utf8_upper(/;"	d
utf8_width	utf8.c	/^int utf8_width(int ch)$/;"	f
utf8_width	utf8.h	/^#define utf8_width(/;"	d
utf8range	utf8.c	/^struct utf8range {$/;"	s	file:
val	jim.h	/^        void *val;$/;"	m	union:Jim_HashEntry::__anon9
valDestructor	jim.h	/^    void (*valDestructor)(void *privdata, void *obj);$/;"	m	struct:Jim_HashTableType
valDup	jim.h	/^    void *(*valDup)(void *privdata, const void *obj);$/;"	m	struct:Jim_HashTableType
varNameObjPtr	jim.h	/^            struct Jim_Obj *varNameObjPtr;$/;"	m	struct:Jim_Obj::__anon10::__anon18	typeref:struct:Jim_Obj::__anon10::__anon18::Jim_Obj
varPtr	jim.h	/^            struct Jim_Var *varPtr;$/;"	m	struct:Jim_Obj::__anon10::__anon12	typeref:struct:Jim_Obj::__anon10::__anon12::Jim_Var
varValue	jim.h	/^        } varValue;$/;"	m	union:Jim_Obj::__anon10	typeref:struct:Jim_Obj::__anon10::__anon12
variableObjType	jim.c	/^static const Jim_ObjType variableObjType = {$/;"	v	file:
vars	jim.h	/^    struct Jim_HashTable vars; \/* Where local vars are stored *\/$/;"	m	struct:Jim_CallFrame	typeref:struct:Jim_CallFrame::Jim_HashTable
vector	jim.h	/^    void **vector;$/;"	m	struct:Jim_Stack
volatile	build/CMakeFiles/3.6.1/CompilerIdC/CMakeCCompilerId.c	/^# define volatile$/;"	d	file:
wideValue	jim.h	/^        jim_wide wideValue;$/;"	m	union:Jim_Obj::__anon10
width	jim.c	/^    size_t width;               \/* Maximal width of input to be converted *\/$/;"	m	struct:ScanFmtPartDescr	file:
xdigitval	jim.c	/^static int xdigitval(int c)$/;"	f	file:
